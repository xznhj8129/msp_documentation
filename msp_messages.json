{
    "MSP_API_VERSION": {
        "hex": "0x1",
        "id": 1,
        "mspv": 1,
        "size": 3,
        "struct": "3B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "mspProtocolVersion",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "MSP Protocol version (`MSP_PROTOCOL_VERSION`, typically 0)."
            },
            {
                "name": "apiVersionMajor",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "INAV API Major version (`API_VERSION_MAJOR`)."
            },
            {
                "name": "apiVersionMinor",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "INAV API Minor version (`API_VERSION_MINOR`)."
            }
        ],
        "deprecated": null,
        "description": "Provides the MSP protocol version and the INAV API version."
    },
    "MSP_FC_VARIANT": {
        "hex": "0x2",
        "id": 2,
        "mspv": 1,
        "size": 4,
        "struct": "4s",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "fcVariantIdentifier",
                "ctype": "char[4]",
                "size": 4,
                "units": "",
                "desc": "4-character identifier string (e.g., \"INAV\"). Defined by `flightControllerIdentifier`."
            }
        ],
        "deprecated": null,
        "description": "Identifies the flight controller firmware variant (e.g., INAV, Betaflight)."
    },
    "MSP_FC_VERSION": {
        "hex": "0x3",
        "id": 3,
        "mspv": 1,
        "size": 3,
        "struct": "3B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "fcVersionMajor",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Firmware Major version (`FC_VERSION_MAJOR`)."
            },
            {
                "name": "fcVersionMinor",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Firmware Minor version (`FC_VERSION_MINOR`)."
            },
            {
                "name": "fcVersionPatch",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Firmware Patch level (`FC_VERSION_PATCH_LEVEL`)."
            }
        ],
        "deprecated": null,
        "description": "Provides the specific version number of the flight controller firmware."
    },
    "MSP_BOARD_INFO": {
        "hex": "0x4",
        "id": 4,
        "mspv": 1,
        "size": null,
        "struct": null,
        "direction": 1,
        "variable_len": true,
        "payload": [
            {
                "name": "boardIdentifier",
                "ctype": "char[4]",
                "size": 4,
                "units": "",
                "desc": "4-character UPPER CASE board identifier (`TARGET_BOARD_IDENTIFIER`)."
            },
            {
                "name": "hardwareRevision",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Hardware revision number. 0 if not detected (`USE_HARDWARE_REVISION_DETECTION`)."
            },
            {
                "name": "osdSupport",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "OSD chip type: 0=None, 2=Onboard (`USE_OSD`). INAV does not support slave OSD (1)."
            },
            {
                "name": "commCapabilities",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Communication capabilities bitmask: Bit 0=VCP support (`USE_VCP`), Bit 1=SoftSerial support (`USE_SOFTSERIAL1`/`2`)."
            },
            {
                "name": "targetNameLength",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Length of the target name string that follows."
            },
            {
                "name": "targetName",
                "ctype": "char[]",
                "size": null,
                "units": "",
                "desc": "Target name string (e.g., \"MATEKF405\"). Length given by previous field."
            }
        ],
        "deprecated": null,
        "description": "Provides information about the specific hardware board and its capabilities."
    },
    "MSP_BUILD_INFO": {
        "hex": "0x5",
        "id": 5,
        "mspv": 1,
        "size": 26,
        "struct": "11s8s7s",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "buildDate",
                "ctype": "char[11]",
                "size": 11,
                "units": "",
                "desc": "Build date string (e.g., \"Dec 31 2023\"). `BUILD_DATE_LENGTH`."
            },
            {
                "name": "buildTime",
                "ctype": "char[8]",
                "size": 8,
                "units": "",
                "desc": "Build time string (e.g., \"23:59:59\"). `BUILD_TIME_LENGTH`."
            },
            {
                "name": "gitRevision",
                "ctype": "char[7]",
                "size": 7,
                "units": "",
                "desc": "Short Git revision string. `GIT_SHORT_REVISION_LENGTH`."
            }
        ],
        "deprecated": null,
        "description": "Provides build date, time, and Git revision of the firmware."
    },
    "MSP_INAV_PID": {
        "hex": "0x6",
        "id": 6,
        "mspv": 1,
        "size": 15,
        "struct": "B2H2BH6B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "legacyAsyncProcessing",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Legacy, unused. Always 0."
            },
            {
                "name": "legacyAsyncValue1",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Legacy, unused. Always 0."
            },
            {
                "name": "legacyAsyncValue2",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Legacy, unused. Always 0."
            },
            {
                "name": "headingHoldRateLimit",
                "ctype": "uint8_t",
                "size": 1,
                "units": "deg/s",
                "desc": "Max rate for heading hold P term (`pidProfile()->heading_hold_rate_limit`)."
            },
            {
                "name": "headingHoldLpfFreq",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Hz",
                "desc": "Fixed LPF frequency for heading hold error (`HEADING_HOLD_ERROR_LPF_FREQ`)."
            },
            {
                "name": "legacyYawJumpLimit",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Legacy, unused. Always 0."
            },
            {
                "name": "legacyGyroLpf",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Fixed value `GYRO_LPF_256HZ`.",
                "enum": "?_e"
            },
            {
                "name": "accLpfHz",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Hz",
                "desc": "Accelerometer LPF frequency (`accelerometerConfig()->acc_lpf_hz`)."
            },
            {
                "name": "reserved1",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Reserved. Always 0."
            },
            {
                "name": "reserved2",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Reserved. Always 0."
            },
            {
                "name": "reserved3",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Reserved. Always 0."
            },
            {
                "name": "reserved4",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Reserved. Always 0."
            }
        ],
        "deprecated": null,
        "description": "Retrieves legacy INAV-specific PID controller related settings. Many fields are now obsolete or placeholders."
    },
    "MSP_SET_INAV_PID": {
        "hex": "0x7",
        "id": 7,
        "mspv": 1,
        "size": 15,
        "struct": "B2H2BH6B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "legacyAsyncProcessing",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Legacy, ignored."
            },
            {
                "name": "legacyAsyncValue1",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Legacy, ignored."
            },
            {
                "name": "legacyAsyncValue2",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Legacy, ignored."
            },
            {
                "name": "headingHoldRateLimit",
                "ctype": "uint8_t",
                "size": 1,
                "units": "deg/s",
                "desc": "Sets `pidProfileMutable()->heading_hold_rate_limit`."
            },
            {
                "name": "headingHoldLpfFreq",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Hz",
                "desc": "Ignored (fixed value `HEADING_HOLD_ERROR_LPF_FREQ` used)."
            },
            {
                "name": "legacyYawJumpLimit",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Legacy, ignored."
            },
            {
                "name": "legacyGyroLpf",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Ignored (was gyro LPF).",
                "enum": "?_e"
            },
            {
                "name": "accLpfHz",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Hz",
                "desc": "Sets `accelerometerConfigMutable()->acc_lpf_hz`."
            },
            {
                "name": "reserved1",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "reserved2",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "reserved3",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "reserved4",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Ignored."
            }
        ],
        "deprecated": null,
        "description": "Sets legacy INAV-specific PID controller related settings."
    },
    "MSP_NAME": {
        "hex": "0xa",
        "id": 10,
        "mspv": 1,
        "size": null,
        "struct": null,
        "direction": 1,
        "variable_len": true,
        "payload": [
            {
                "name": "craftName",
                "ctype": "char[]",
                "size": null,
                "units": "",
                "desc": "The craft name string (`systemConfig()->craftName`). Null termination is *not* explicitly sent, the length is determined by the payload size."
            }
        ],
        "deprecated": null,
        "description": "Returns the user-defined craft name."
    },
    "MSP_SET_NAME": {
        "hex": "0xb",
        "id": 11,
        "mspv": 1,
        "size": null,
        "struct": null,
        "direction": 0,
        "variable_len": true,
        "payload": [
            {
                "name": "craftName",
                "ctype": "char[]",
                "size": null,
                "units": "",
                "desc": "The new craft name string. Automatically null-terminated by the FC."
            }
        ],
        "deprecated": null,
        "description": "Sets the user-defined craft name."
    },
    "MSP_NAV_POSHOLD": {
        "hex": "0xc",
        "id": 12,
        "mspv": 1,
        "size": 13,
        "struct": "B4H2BH",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "userControlMode",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Navigation user control mode (`navConfig()->general.flags.user_control_mode`).",
                "enum": "?_e"
            },
            {
                "name": "maxAutoSpeed",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Max speed in autonomous modes (`navConfig()->general.max_auto_speed`)."
            },
            {
                "name": "maxAutoClimbRate",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Max climb rate in autonomous modes (uses `fw.max_auto_climb_rate` or `mc.max_auto_climb_rate` based on platform)."
            },
            {
                "name": "maxManualSpeed",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Max speed in manual modes with GPS aiding (`navConfig()->general.max_manual_speed`)."
            },
            {
                "name": "maxManualClimbRate",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Max climb rate in manual modes with GPS aiding (uses `fw.max_manual_climb_rate` or `mc.max_manual_climb_rate`)."
            },
            {
                "name": "mcMaxBankAngle",
                "ctype": "uint8_t",
                "size": 1,
                "units": "degrees",
                "desc": "Max bank angle for multirotor position hold (`navConfig()->mc.max_bank_angle`)."
            },
            {
                "name": "mcAltHoldThrottleType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Altitude Hold throttle control type (`navConfig()->mc.althold_throttle_type`).",
                "enum": "?_e"
            },
            {
                "name": "mcHoverThrottle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Multirotor hover throttle (`currentBatteryProfile->nav.mc.hover_throttle`)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves navigation position hold and general manual/auto flight parameters. Some parameters depend on the platform type (Multirotor vs Fixed Wing)."
    },
    "MSP_SET_NAV_POSHOLD": {
        "hex": "0xd",
        "id": 13,
        "mspv": 1,
        "size": 13,
        "struct": "B4H2BH",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "userControlMode",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Sets `navConfigMutable()->general.flags.user_control_mode`.",
                "enum": "?_e"
            },
            {
                "name": "maxAutoSpeed",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Sets `navConfigMutable()->general.max_auto_speed`."
            },
            {
                "name": "maxAutoClimbRate",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Sets `fw.max_auto_climb_rate` or `mc.max_auto_climb_rate` based on current platform type."
            },
            {
                "name": "maxManualSpeed",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Sets `navConfigMutable()->general.max_manual_speed`."
            },
            {
                "name": "maxManualClimbRate",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Sets `fw.max_manual_climb_rate` or `mc.max_manual_climb_rate`."
            },
            {
                "name": "mcMaxBankAngle",
                "ctype": "uint8_t",
                "size": 1,
                "units": "degrees",
                "desc": "Sets `navConfigMutable()->mc.max_bank_angle`."
            },
            {
                "name": "mcAltHoldThrottleType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Sets `navConfigMutable()->mc.althold_throttle_type`.",
                "enum": "?_e"
            },
            {
                "name": "mcHoverThrottle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Sets `currentBatteryProfileMutable->nav.mc.hover_throttle`."
            }
        ],
        "deprecated": null,
        "description": "Sets navigation position hold and general manual/auto flight parameters."
    },
    "MSP_CALIBRATION_DATA": {
        "hex": "0xe",
        "id": 14,
        "mspv": 1,
        "size": 27,
        "struct": "B13H",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "accCalibAxisFlags",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Bitmask",
                "desc": "Flags indicating which axes of the accelerometer have been calibrated (`accGetCalibrationAxisFlags()`)."
            },
            {
                "name": "accZeroX",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Raw ADC",
                "desc": "Accelerometer zero offset for X-axis (`accelerometerConfig()->accZero.raw[X]`)."
            },
            {
                "name": "accZeroY",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Raw ADC",
                "desc": "Accelerometer zero offset for Y-axis (`accelerometerConfig()->accZero.raw[Y]`)."
            },
            {
                "name": "accZeroZ",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Raw ADC",
                "desc": "Accelerometer zero offset for Z-axis (`accelerometerConfig()->accZero.raw[Z]`)."
            },
            {
                "name": "accGainX",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Raw ADC",
                "desc": "Accelerometer gain/scale for X-axis (`accelerometerConfig()->accGain.raw[X]`)."
            },
            {
                "name": "accGainY",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Raw ADC",
                "desc": "Accelerometer gain/scale for Y-axis (`accelerometerConfig()->accGain.raw[Y]`)."
            },
            {
                "name": "accGainZ",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Raw ADC",
                "desc": "Accelerometer gain/scale for Z-axis (`accelerometerConfig()->accGain.raw[Z]`)."
            },
            {
                "name": "magZeroX",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Raw ADC",
                "desc": "Magnetometer zero offset for X-axis (`compassConfig()->magZero.raw[X]`). 0 if `USE_MAG` disabled."
            },
            {
                "name": "magZeroY",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Raw ADC",
                "desc": "Magnetometer zero offset for Y-axis (`compassConfig()->magZero.raw[Y]`). 0 if `USE_MAG` disabled."
            },
            {
                "name": "magZeroZ",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Raw ADC",
                "desc": "Magnetometer zero offset for Z-axis (`compassConfig()->magZero.raw[Z]`). 0 if `USE_MAG` disabled."
            },
            {
                "name": "opflowScale",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Scale * 256",
                "desc": "Optical flow scale factor (`opticalFlowConfig()->opflow_scale * 256`). 0 if `USE_OPFLOW` disabled."
            },
            {
                "name": "magGainX",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Raw ADC",
                "desc": "Magnetometer gain/scale for X-axis (`compassConfig()->magGain[X]`). 0 if `USE_MAG` disabled."
            },
            {
                "name": "magGainY",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Raw ADC",
                "desc": "Magnetometer gain/scale for Y-axis (`compassConfig()->magGain[Y]`). 0 if `USE_MAG` disabled."
            },
            {
                "name": "magGainZ",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Raw ADC",
                "desc": "Magnetometer gain/scale for Z-axis (`compassConfig()->magGain[Z]`). 0 if `USE_MAG` disabled."
            }
        ],
        "deprecated": null,
        "description": "Retrieves sensor calibration data (Accelerometer zero/gain, Magnetometer zero/gain, Optical Flow scale)."
    },
    "MSP_SET_CALIBRATION_DATA": {
        "hex": "0xf",
        "id": 15,
        "mspv": 1,
        "size": 26,
        "struct": "13H",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "accZeroX",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Raw ADC",
                "desc": "Sets `accelerometerConfigMutable()->accZero.raw[X]`."
            },
            {
                "name": "accZeroY",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Raw ADC",
                "desc": "Sets `accelerometerConfigMutable()->accZero.raw[Y]`."
            },
            {
                "name": "accZeroZ",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Raw ADC",
                "desc": "Sets `accelerometerConfigMutable()->accZero.raw[Z]`."
            },
            {
                "name": "accGainX",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Raw ADC",
                "desc": "Sets `accelerometerConfigMutable()->accGain.raw[X]`."
            },
            {
                "name": "accGainY",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Raw ADC",
                "desc": "Sets `accelerometerConfigMutable()->accGain.raw[Y]`."
            },
            {
                "name": "accGainZ",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Raw ADC",
                "desc": "Sets `accelerometerConfigMutable()->accGain.raw[Z]`."
            },
            {
                "name": "magZeroX",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Raw ADC",
                "desc": "Sets `compassConfigMutable()->magZero.raw[X]` (if `USE_MAG`)."
            },
            {
                "name": "magZeroY",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Raw ADC",
                "desc": "Sets `compassConfigMutable()->magZero.raw[Y]` (if `USE_MAG`)."
            },
            {
                "name": "magZeroZ",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Raw ADC",
                "desc": "Sets `compassConfigMutable()->magZero.raw[Z]` (if `USE_MAG`)."
            },
            {
                "name": "opflowScale",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Scale * 256",
                "desc": "Sets `opticalFlowConfigMutable()->opflow_scale = value / 256.0f` (if `USE_OPFLOW`)."
            },
            {
                "name": "magGainX",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Raw ADC",
                "desc": "Sets `compassConfigMutable()->magGain[X]` (if `USE_MAG`)."
            },
            {
                "name": "magGainY",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Raw ADC",
                "desc": "Sets `compassConfigMutable()->magGain[Y]` (if `USE_MAG`)."
            },
            {
                "name": "magGainZ",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Raw ADC",
                "desc": "Sets `compassConfigMutable()->magGain[Z]` (if `USE_MAG`)."
            }
        ],
        "deprecated": null,
        "description": "Sets sensor calibration data."
    },
    "MSP_POSITION_ESTIMATION_CONFIG": {
        "hex": "0x10",
        "id": 16,
        "mspv": 1,
        "size": 12,
        "struct": "5H2B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "weightZBaroP",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Weight * 100",
                "desc": "Barometer Z position fusion weight (`positionEstimationConfig()->w_z_baro_p * 100`)."
            },
            {
                "name": "weightZGPSP",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Weight * 100",
                "desc": "GPS Z position fusion weight (`positionEstimationConfig()->w_z_gps_p * 100`)."
            },
            {
                "name": "weightZGPSV",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Weight * 100",
                "desc": "GPS Z velocity fusion weight (`positionEstimationConfig()->w_z_gps_v * 100`)."
            },
            {
                "name": "weightXYGPSP",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Weight * 100",
                "desc": "GPS XY position fusion weight (`positionEstimationConfig()->w_xy_gps_p * 100`)."
            },
            {
                "name": "weightXYGPSV",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Weight * 100",
                "desc": "GPS XY velocity fusion weight (`positionEstimationConfig()->w_xy_gps_v * 100`)."
            },
            {
                "name": "minSats",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Count",
                "desc": "Minimum satellites required for GPS use (`gpsConfigMutable()->gpsMinSats`)."
            },
            {
                "name": "useGPSVelNED",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Boolean",
                "desc": "Legacy flag, always 1 (GPS velocity is always used if available)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves parameters related to the INAV position estimation fusion weights and GPS minimum satellite count."
    },
    "MSP_SET_POSITION_ESTIMATION_CONFIG": {
        "hex": "0x11",
        "id": 17,
        "mspv": 1,
        "size": 12,
        "struct": "5H2B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "weightZBaroP",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Weight * 100",
                "desc": "Sets `positionEstimationConfigMutable()->w_z_baro_p = value / 100.0f` (constrained 0.0-10.0)."
            },
            {
                "name": "weightZGPSP",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Weight * 100",
                "desc": "Sets `positionEstimationConfigMutable()->w_z_gps_p = value / 100.0f` (constrained 0.0-10.0)."
            },
            {
                "name": "weightZGPSV",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Weight * 100",
                "desc": "Sets `positionEstimationConfigMutable()->w_z_gps_v = value / 100.0f` (constrained 0.0-10.0)."
            },
            {
                "name": "weightXYGPSP",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Weight * 100",
                "desc": "Sets `positionEstimationConfigMutable()->w_xy_gps_p = value / 100.0f` (constrained 0.0-10.0)."
            },
            {
                "name": "weightXYGPSV",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Weight * 100",
                "desc": "Sets `positionEstimationConfigMutable()->w_xy_gps_v = value / 100.0f` (constrained 0.0-10.0)."
            },
            {
                "name": "minSats",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Count",
                "desc": "Sets `gpsConfigMutable()->gpsMinSats` (constrained 5-10)."
            },
            {
                "name": "useGPSVelNED",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Boolean",
                "desc": "Legacy flag, ignored."
            }
        ],
        "deprecated": null,
        "description": "Sets parameters related to the INAV position estimation fusion weights and GPS minimum satellite count."
    },
    "MSP_WP_MISSION_LOAD": {
        "hex": "0x12",
        "id": 18,
        "mspv": 1,
        "size": 1,
        "struct": "B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "missionID",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Reserved for future use, currently ignored."
            }
        ],
        "deprecated": null,
        "description": "Commands the FC to load the waypoint mission stored in non-volatile memory (e.g., EEPROM or FlashFS) into the active mission buffer."
    },
    "MSP_WP_MISSION_SAVE": {
        "hex": "0x13",
        "id": 19,
        "mspv": 1,
        "size": 1,
        "struct": "B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "missionID",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Reserved for future use, currently ignored."
            }
        ],
        "deprecated": null,
        "description": "Commands the FC to save the currently active waypoint mission from RAM to non-volatile memory (e.g., EEPROM or FlashFS)."
    },
    "MSP_WP_GETINFO": {
        "hex": "0x14",
        "id": 20,
        "mspv": 1,
        "size": 4,
        "struct": "4B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "wpCapabilities",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Reserved for future waypoint capabilities flags. Currently always 0."
            },
            {
                "name": "maxWaypoints",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Maximum number of waypoints supported (`NAV_MAX_WAYPOINTS`)."
            },
            {
                "name": "missionValid",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Boolean flag indicating if the current mission in RAM is valid (`isWaypointListValid()`)."
            },
            {
                "name": "waypointCount",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Number of waypoints currently defined in the mission (`getWaypointCount()`)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves information about the waypoint mission capabilities and the status of the currently loaded mission."
    },
    "MSP_RTH_AND_LAND_CONFIG": {
        "hex": "0x15",
        "id": 21,
        "mspv": 1,
        "size": 21,
        "struct": "H5B7H",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "minRthDistance",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "Minimum distance from home required for RTH to engage (`navConfig()->general.min_rth_distance`)."
            },
            {
                "name": "rthClimbFirst",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Boolean",
                "desc": "Flag: Climb to RTH altitude before returning (`navConfig()->general.flags.rth_climb_first`)."
            },
            {
                "name": "rthClimbIgnoreEmerg",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Boolean",
                "desc": "Flag: Climb even in emergency RTH (`navConfig()->general.flags.rth_climb_ignore_emerg`)."
            },
            {
                "name": "rthTailFirst",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Boolean",
                "desc": "Flag: Multirotor returns tail-first (`navConfig()->general.flags.rth_tail_first`)."
            },
            {
                "name": "rthAllowLanding",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Boolean",
                "desc": "Flag: Allow automatic landing after RTH (`navConfig()->general.flags.rth_allow_landing`)."
            },
            {
                "name": "rthAltControlMode",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "RTH altitude control mode (`navConfig()->general.flags.rth_alt_control_mode`).",
                "enum": "?_e"
            },
            {
                "name": "rthAbortThreshold",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Stick input threshold to abort RTH (`navConfig()->general.rth_abort_threshold`)."
            },
            {
                "name": "rthAltitude",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "Target RTH altitude (`navConfig()->general.rth_altitude`)."
            },
            {
                "name": "landMinAltVspd",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Landing vertical speed at minimum slowdown altitude (`navConfig()->general.land_minalt_vspd`)."
            },
            {
                "name": "landMaxAltVspd",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Landing vertical speed at maximum slowdown altitude (`navConfig()->general.land_maxalt_vspd`)."
            },
            {
                "name": "landSlowdownMinAlt",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "Altitude below which `landMinAltVspd` applies (`navConfig()->general.land_slowdown_minalt`)."
            },
            {
                "name": "landSlowdownMaxAlt",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "Altitude above which `landMaxAltVspd` applies (`navConfig()->general.land_slowdown_maxalt`)."
            },
            {
                "name": "emergDescentRate",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Vertical speed during emergency landing descent (`navConfig()->general.emerg_descent_rate`)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves configuration parameters related to Return-to-Home (RTH) and automatic landing behaviors."
    },
    "MSP_SET_RTH_AND_LAND_CONFIG": {
        "hex": "0x16",
        "id": 22,
        "mspv": 1,
        "size": 21,
        "struct": "H5B7H",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "minRthDistance",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "Sets `navConfigMutable()->general.min_rth_distance`."
            },
            {
                "name": "rthClimbFirst",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Boolean",
                "desc": "Sets `navConfigMutable()->general.flags.rth_climb_first`."
            },
            {
                "name": "rthClimbIgnoreEmerg",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Boolean",
                "desc": "Sets `navConfigMutable()->general.flags.rth_climb_ignore_emerg`."
            },
            {
                "name": "rthTailFirst",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Boolean",
                "desc": "Sets `navConfigMutable()->general.flags.rth_tail_first`."
            },
            {
                "name": "rthAllowLanding",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Boolean",
                "desc": "Sets `navConfigMutable()->general.flags.rth_allow_landing`."
            },
            {
                "name": "rthAltControlMode",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Sets `navConfigMutable()->general.flags.rth_alt_control_mode`.",
                "enum": "?_e"
            },
            {
                "name": "rthAbortThreshold",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Sets `navConfigMutable()->general.rth_abort_threshold`."
            },
            {
                "name": "rthAltitude",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "Sets `navConfigMutable()->general.rth_altitude`."
            },
            {
                "name": "landMinAltVspd",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Sets `navConfigMutable()->general.land_minalt_vspd`."
            },
            {
                "name": "landMaxAltVspd",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Sets `navConfigMutable()->general.land_maxalt_vspd`."
            },
            {
                "name": "landSlowdownMinAlt",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "Sets `navConfigMutable()->general.land_slowdown_minalt`."
            },
            {
                "name": "landSlowdownMaxAlt",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "Sets `navConfigMutable()->general.land_slowdown_maxalt`."
            },
            {
                "name": "emergDescentRate",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Sets `navConfigMutable()->general.emerg_descent_rate`."
            }
        ],
        "deprecated": null,
        "description": "Sets configuration parameters related to Return-to-Home (RTH) and automatic landing behaviors."
    },
    "MSP_FW_CONFIG": {
        "hex": "0x17",
        "id": 23,
        "mspv": 1,
        "size": 12,
        "struct": "3H4BH",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "cruiseThrottle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Cruise throttle level (`currentBatteryProfile->nav.fw.cruise_throttle`)."
            },
            {
                "name": "minThrottle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Minimum throttle during autonomous flight (`currentBatteryProfile->nav.fw.min_throttle`)."
            },
            {
                "name": "maxThrottle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Maximum throttle during autonomous flight (`currentBatteryProfile->nav.fw.max_throttle`)."
            },
            {
                "name": "maxBankAngle",
                "ctype": "uint8_t",
                "size": 1,
                "units": "degrees",
                "desc": "Maximum bank angle allowed (`navConfig()->fw.max_bank_angle`)."
            },
            {
                "name": "maxClimbAngle",
                "ctype": "uint8_t",
                "size": 1,
                "units": "degrees",
                "desc": "Maximum pitch angle during climb (`navConfig()->fw.max_climb_angle`)."
            },
            {
                "name": "maxDiveAngle",
                "ctype": "uint8_t",
                "size": 1,
                "units": "degrees",
                "desc": "Maximum negative pitch angle during descent (`navConfig()->fw.max_dive_angle`)."
            },
            {
                "name": "pitchToThrottle",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Ratio (%)",
                "desc": "Pitch-to-throttle feed-forward ratio (`currentBatteryProfile->nav.fw.pitch_to_throttle`)."
            },
            {
                "name": "loiterRadius",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "Default loiter radius (`navConfig()->fw.loiter_radius`)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves configuration parameters specific to Fixed Wing navigation."
    },
    "MSP_SET_FW_CONFIG": {
        "hex": "0x18",
        "id": 24,
        "mspv": 1,
        "size": 12,
        "struct": "3H4BH",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "cruiseThrottle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Sets `currentBatteryProfileMutable->nav.fw.cruise_throttle`."
            },
            {
                "name": "minThrottle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Sets `currentBatteryProfileMutable->nav.fw.min_throttle`."
            },
            {
                "name": "maxThrottle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Sets `currentBatteryProfileMutable->nav.fw.max_throttle`."
            },
            {
                "name": "maxBankAngle",
                "ctype": "uint8_t",
                "size": 1,
                "units": "degrees",
                "desc": "Sets `navConfigMutable()->fw.max_bank_angle`."
            },
            {
                "name": "maxClimbAngle",
                "ctype": "uint8_t",
                "size": 1,
                "units": "degrees",
                "desc": "Sets `navConfigMutable()->fw.max_climb_angle`."
            },
            {
                "name": "maxDiveAngle",
                "ctype": "uint8_t",
                "size": 1,
                "units": "degrees",
                "desc": "Sets `navConfigMutable()->fw.max_dive_angle`."
            },
            {
                "name": "pitchToThrottle",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Ratio (%)",
                "desc": "Sets `currentBatteryProfileMutable->nav.fw.pitch_to_throttle`."
            },
            {
                "name": "loiterRadius",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "Sets `navConfigMutable()->fw.loiter_radius`."
            }
        ],
        "deprecated": null,
        "description": "Sets configuration parameters specific to Fixed Wing navigation."
    },
    "MSP_MODE_RANGES": {
        "hex": "0x22",
        "id": 34,
        "mspv": 1,
        "size": 4,
        "struct": "4B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "modePermanentId",
                "ctype": "uint8_t",
                "size": 1,
                "units": "ID",
                "desc": "Permanent ID of the flight mode (maps to `boxId` via `findBoxByActiveBoxId`). 0 if entry unused."
            },
            {
                "name": "auxChannelIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Index",
                "desc": "0-based index of the AUX channel used for activation."
            },
            {
                "name": "rangeStartStep",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0-20",
                "desc": "Start step (corresponding to channel value range 900-2100 in steps of 50/25, depends on steps calculation)."
            },
            {
                "name": "rangeEndStep",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0-20",
                "desc": "End step for the activation range."
            }
        ],
        "deprecated": null,
        "description": "Returns all defined mode activation ranges (aux channel assignments for flight modes)."
    },
    "MSP_SET_MODE_RANGE": {
        "hex": "0x23",
        "id": 35,
        "mspv": 1,
        "size": 5,
        "struct": "5B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "rangeIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Index",
                "desc": "Index of the mode range to set (0 to `MAX_MODE_ACTIVATION_CONDITION_COUNT - 1`)."
            },
            {
                "name": "modePermanentId",
                "ctype": "uint8_t",
                "size": 1,
                "units": "ID",
                "desc": "Permanent ID of the flight mode to assign."
            },
            {
                "name": "auxChannelIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Index",
                "desc": "0-based index of the AUX channel."
            },
            {
                "name": "rangeStartStep",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0-20",
                "desc": "Start step for activation."
            },
            {
                "name": "rangeEndStep",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0-20",
                "desc": "End step for activation."
            }
        ],
        "deprecated": null,
        "description": "Sets a single mode activation range by its index."
    },
    "MSP_FEATURE": {
        "hex": "0x24",
        "id": 36,
        "mspv": 1,
        "size": 4,
        "struct": "I",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "featureMask",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Bitmask of active features (see `featureMask()`)."
            }
        ],
        "deprecated": null,
        "description": "Returns a bitmask of enabled features."
    },
    "MSP_SET_FEATURE": {
        "hex": "0x25",
        "id": 37,
        "mspv": 1,
        "size": 4,
        "struct": "I",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "featureMask",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Bitmask of features to enable."
            }
        ],
        "deprecated": null,
        "description": "Sets the enabled features using a bitmask. Clears all previous features first."
    },
    "MSP_BOARD_ALIGNMENT": {
        "hex": "0x26",
        "id": 38,
        "mspv": 1,
        "size": 6,
        "struct": "3H",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "rollAlign",
                "ctype": "uint16_t",
                "size": 2,
                "units": "deci-degrees",
                "desc": "Board alignment roll angle (`boardAlignment()->rollDeciDegrees`)."
            },
            {
                "name": "pitchAlign",
                "ctype": "uint16_t",
                "size": 2,
                "units": "deci-degrees",
                "desc": "Board alignment pitch angle (`boardAlignment()->pitchDeciDegrees`)."
            },
            {
                "name": "yawAlign",
                "ctype": "uint16_t",
                "size": 2,
                "units": "deci-degrees",
                "desc": "Board alignment yaw angle (`boardAlignment()->yawDeciDegrees`)."
            }
        ],
        "deprecated": null,
        "description": "Returns the sensor board alignment angles relative to the craft frame."
    },
    "MSP_SET_BOARD_ALIGNMENT": {
        "hex": "0x27",
        "id": 39,
        "mspv": 1,
        "size": 6,
        "struct": "3H",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "rollAlign",
                "ctype": "uint16_t",
                "size": 2,
                "units": "deci-degrees",
                "desc": "Sets `boardAlignmentMutable()->rollDeciDegrees`."
            },
            {
                "name": "pitchAlign",
                "ctype": "uint16_t",
                "size": 2,
                "units": "deci-degrees",
                "desc": "Sets `boardAlignmentMutable()->pitchDeciDegrees`."
            },
            {
                "name": "yawAlign",
                "ctype": "uint16_t",
                "size": 2,
                "units": "deci-degrees",
                "desc": "Sets `boardAlignmentMutable()->yawDeciDegrees`."
            }
        ],
        "deprecated": null,
        "description": "Sets the sensor board alignment angles."
    },
    "MSP_CURRENT_METER_CONFIG": {
        "hex": "0x28",
        "id": 40,
        "mspv": 1,
        "size": 7,
        "struct": "2HBH",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "scale",
                "ctype": "uint16_t",
                "size": 2,
                "units": "mV/10A or similar",
                "desc": "Current sensor scale factor (`batteryMetersConfig()->current.scale`). Units depend on sensor type."
            },
            {
                "name": "offset",
                "ctype": "uint16_t",
                "size": 2,
                "units": "mV",
                "desc": "Current sensor offset (`batteryMetersConfig()->current.offset`)."
            },
            {
                "name": "type",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Type of current sensor hardware (`batteryMetersConfig()->current.type`).",
                "enum": "?_e"
            },
            {
                "name": "capacity",
                "ctype": "uint16_t",
                "size": 2,
                "units": "mAh (legacy)",
                "desc": "Battery capacity (constrained 0-65535) (`currentBatteryProfile->capacity.value`). Note: This is legacy, use `MSP2_INAV_BATTERY_CONFIG` for full 32-bit capacity."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the configuration for the current sensor."
    },
    "MSP_SET_CURRENT_METER_CONFIG": {
        "hex": "0x29",
        "id": 41,
        "mspv": 1,
        "size": 7,
        "struct": "2HBH",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "scale",
                "ctype": "uint16_t",
                "size": 2,
                "units": "mV/10A or similar",
                "desc": "Sets `batteryMetersConfigMutable()->current.scale`."
            },
            {
                "name": "offset",
                "ctype": "uint16_t",
                "size": 2,
                "units": "mV",
                "desc": "Sets `batteryMetersConfigMutable()->current.offset`."
            },
            {
                "name": "type",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Sets `batteryMetersConfigMutable()->current.type`.",
                "enum": "?_e"
            },
            {
                "name": "capacity",
                "ctype": "uint16_t",
                "size": 2,
                "units": "mAh (legacy)",
                "desc": "Sets `currentBatteryProfileMutable->capacity.value` (truncated to 16 bits)."
            }
        ],
        "deprecated": null,
        "description": "Sets the configuration for the current sensor."
    },
    "MSP_MIXER": {
        "hex": "0x2a",
        "id": 42,
        "mspv": 1,
        "size": 1,
        "struct": "B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "mixerMode",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Always 3 (QuadX) in INAV for compatibility."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the mixer type (Legacy, INAV always returns QuadX)."
    },
    "MSP_SET_MIXER": {
        "hex": "0x2b",
        "id": 43,
        "mspv": 1,
        "size": 1,
        "struct": "B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "mixerMode",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Mixer mode to set (ignored by INAV)."
            }
        ],
        "deprecated": null,
        "description": "Sets the mixer type (Legacy, ignored by INAV)."
    },
    "MSP_RX_CONFIG": {
        "hex": "0x2c",
        "id": 44,
        "mspv": 1,
        "size": 24,
        "struct": "B3HB2H2BHBI3B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "serialRxProvider",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Serial RX provider type (`rxConfig()->serialrx_provider`).",
                "enum": "?_e"
            },
            {
                "name": "maxCheck",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Upper channel value threshold for stick commands (`rxConfig()->maxcheck`)."
            },
            {
                "name": "midRc",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Center channel value (`PWM_RANGE_MIDDLE`, typically 1500)."
            },
            {
                "name": "minCheck",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Lower channel value threshold for stick commands (`rxConfig()->mincheck`)."
            },
            {
                "name": "spektrumSatBind",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Count/Flag",
                "desc": "Spektrum bind pulses (`rxConfig()->spektrum_sat_bind`). 0 if `USE_SPEKTRUM_BIND` disabled."
            },
            {
                "name": "rxMinUsec",
                "ctype": "uint16_t",
                "size": 2,
                "units": "µs",
                "desc": "Minimum expected pulse width (`rxConfig()->rx_min_usec`)."
            },
            {
                "name": "rxMaxUsec",
                "ctype": "uint16_t",
                "size": 2,
                "units": "µs",
                "desc": "Maximum expected pulse width (`rxConfig()->rx_max_usec`)."
            },
            {
                "name": "bfCompatRcInterpolation",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "BF compatibility. Always 0."
            },
            {
                "name": "bfCompatRcInterpolationInt",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "BF compatibility. Always 0."
            },
            {
                "name": "bfCompatAirModeThreshold",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "BF compatibility. Always 0."
            },
            {
                "name": "reserved1",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Reserved/Padding. Always 0."
            },
            {
                "name": "reserved2",
                "ctype": "uint32_t",
                "size": 4,
                "units": "-",
                "desc": "Reserved/Padding. Always 0."
            },
            {
                "name": "reserved3",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Reserved/Padding. Always 0."
            },
            {
                "name": "bfCompatFpvCamAngle",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "BF compatibility. Always 0."
            },
            {
                "name": "receiverType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Receiver type (Parallel PWM, PPM, Serial) (`rxConfig()->receiverType`).",
                "enum": "?_e"
            }
        ],
        "deprecated": null,
        "description": "Retrieves receiver configuration settings. Some fields are Betaflight compatibility placeholders."
    },
    "MSP_SET_RX_CONFIG": {
        "hex": "0x2d",
        "id": 45,
        "mspv": 1,
        "size": 24,
        "struct": "B3HB2H2BHBI3B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "serialRxProvider",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Sets `rxConfigMutable()->serialrx_provider`.",
                "enum": "?_e"
            },
            {
                "name": "maxCheck",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Sets `rxConfigMutable()->maxcheck`."
            },
            {
                "name": "midRc",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Ignored (`PWM_RANGE_MIDDLE` is used)."
            },
            {
                "name": "minCheck",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Sets `rxConfigMutable()->mincheck`."
            },
            {
                "name": "spektrumSatBind",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Count/Flag",
                "desc": "Sets `rxConfigMutable()->spektrum_sat_bind` (if `USE_SPEKTRUM_BIND`)."
            },
            {
                "name": "rxMinUsec",
                "ctype": "uint16_t",
                "size": 2,
                "units": "µs",
                "desc": "Sets `rxConfigMutable()->rx_min_usec`."
            },
            {
                "name": "rxMaxUsec",
                "ctype": "uint16_t",
                "size": 2,
                "units": "µs",
                "desc": "Sets `rxConfigMutable()->rx_max_usec`."
            },
            {
                "name": "bfCompatRcInterpolation",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "bfCompatRcInterpolationInt",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "bfCompatAirModeThreshold",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "reserved1",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "reserved2",
                "ctype": "uint32_t",
                "size": 4,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "reserved3",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "bfCompatFpvCamAngle",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "receiverType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Sets `rxConfigMutable()->receiverType`.",
                "enum": "?_e"
            }
        ],
        "deprecated": null,
        "description": "Sets receiver configuration settings."
    },
    "MSP_LED_COLORS": {
        "hex": "0x2e",
        "id": 46,
        "mspv": 1,
        "size": 4,
        "struct": "H2B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "hue",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Hue value (0-359)."
            },
            {
                "name": "saturation",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Saturation value (0-255)."
            },
            {
                "name": "value",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Value/Brightness (0-255)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the HSV color definitions for configurable LED colors."
    },
    "MSP_SET_LED_COLORS": {
        "hex": "0x2f",
        "id": 47,
        "mspv": 1,
        "size": 4,
        "struct": "H2B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "hue",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Hue value (0-359)."
            },
            {
                "name": "saturation",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Saturation value (0-255)."
            },
            {
                "name": "value",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Value/Brightness (0-255)."
            }
        ],
        "deprecated": null,
        "description": "Sets the HSV color definitions for configurable LED colors."
    },
    "MSP_LED_STRIP_CONFIG": {
        "hex": "0x30",
        "id": 48,
        "mspv": 1,
        "size": 4,
        "struct": "I",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "legacyLedConfig",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Packed LED configuration (position, function, overlay, color, direction, params). See C code for bit packing details."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the configuration for each LED on the strip (legacy packed format)."
    },
    "MSP_SET_LED_STRIP_CONFIG": {
        "hex": "0x31",
        "id": 49,
        "mspv": 1,
        "size": 5,
        "struct": "BI",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "ledIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Index of the LED to configure (0 to `LED_MAX_STRIP_LENGTH - 1`)."
            },
            {
                "name": "legacyLedConfig",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Packed LED configuration to set."
            }
        ],
        "deprecated": null,
        "description": "Sets the configuration for a single LED on the strip using the legacy packed format."
    },
    "MSP_RSSI_CONFIG": {
        "hex": "0x32",
        "id": 50,
        "mspv": 1,
        "size": 1,
        "struct": "B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "rssiChannel",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "AUX channel index (1-based) used for RSSI, or 0 if disabled (`rxConfig()->rssi_channel`)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the channel used for analog RSSI input."
    },
    "MSP_SET_RSSI_CONFIG": {
        "hex": "0x33",
        "id": 51,
        "mspv": 1,
        "size": 1,
        "struct": "B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "rssiChannel",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "AUX channel index (1-based) to use for RSSI, or 0 to disable."
            }
        ],
        "deprecated": null,
        "description": "Sets the channel used for analog RSSI input."
    },
    "MSP_ADJUSTMENT_RANGES": {
        "hex": "0x34",
        "id": 52,
        "mspv": 1,
        "size": 6,
        "struct": "6B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "adjustmentIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Index of the adjustment slot (0 to `MAX_SIMULTANEOUS_ADJUSTMENT_COUNT - 1`)."
            },
            {
                "name": "auxChannelIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "0-based index of the AUX channel controlling the adjustment value."
            },
            {
                "name": "rangeStartStep",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Start step (0-20) of the control channel range."
            },
            {
                "name": "rangeEndStep",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "End step (0-20) of the control channel range."
            },
            {
                "name": "adjustmentFunction",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Function/parameter being adjusted (e.g., PID gain, rate). See `rcAdjustments.h` enum.",
                "enum": "rcAdjustments.h"
            },
            {
                "name": "auxSwitchChannelIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "0-based index of the AUX channel acting as an enable switch (or 0 if always enabled)."
            }
        ],
        "deprecated": null,
        "description": "Returns all defined RC adjustment ranges (tuning via aux channels)."
    },
    "MSP_SET_ADJUSTMENT_RANGE": {
        "hex": "0x35",
        "id": 53,
        "mspv": 1,
        "size": 7,
        "struct": "7B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "rangeIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Index of the adjustment range to set (0 to `MAX_ADJUSTMENT_RANGE_COUNT - 1`)."
            },
            {
                "name": "adjustmentIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Adjustment slot index (0 to `MAX_SIMULTANEOUS_ADJUSTMENT_COUNT - 1`)."
            },
            {
                "name": "auxChannelIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "0-based index of the control AUX channel."
            },
            {
                "name": "rangeStartStep",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Start step (0-20)."
            },
            {
                "name": "rangeEndStep",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "End step (0-20)."
            },
            {
                "name": "adjustmentFunction",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Function/parameter being adjusted."
            },
            {
                "name": "auxSwitchChannelIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "0-based index of the enable switch AUX channel (or 0)."
            }
        ],
        "deprecated": null,
        "description": "Sets a single RC adjustment range configuration by its index."
    },
    "MSP_CF_SERIAL_CONFIG": {
        "hex": "0x36",
        "id": 54,
        "mspv": 1,
        "size": 0,
        "struct": null,
        "direction": 1,
        "variable_len": false,
        "payload": [],
        "deprecated": null,
        "description": "Deprecated command to get serial port configuration."
    },
    "MSP_SET_CF_SERIAL_CONFIG": {
        "hex": "0x37",
        "id": 55,
        "mspv": 1,
        "size": 0,
        "struct": null,
        "direction": 0,
        "variable_len": false,
        "payload": [],
        "deprecated": null,
        "description": "Deprecated command to set serial port configuration."
    },
    "MSP_VOLTAGE_METER_CONFIG": {
        "hex": "0x38",
        "id": 56,
        "mspv": 1,
        "size": 4,
        "struct": "4B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "vbatScale",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Scale / 10",
                "desc": "Voltage sensor scale factor / 10 (`batteryMetersConfig()->voltage.scale / 10`). 0 if `USE_ADC` disabled."
            },
            {
                "name": "vbatMinCell",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0.1V",
                "desc": "Minimum cell voltage / 10 (`currentBatteryProfile->voltage.cellMin / 10`). 0 if `USE_ADC` disabled."
            },
            {
                "name": "vbatMaxCell",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0.1V",
                "desc": "Maximum cell voltage / 10 (`currentBatteryProfile->voltage.cellMax / 10`). 0 if `USE_ADC` disabled."
            },
            {
                "name": "vbatWarningCell",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0.1V",
                "desc": "Warning cell voltage / 10 (`currentBatteryProfile->voltage.cellWarning / 10`). 0 if `USE_ADC` disabled."
            }
        ],
        "deprecated": null,
        "description": "Retrieves legacy voltage meter configuration (scaled values)."
    },
    "MSP_SET_VOLTAGE_METER_CONFIG": {
        "hex": "0x39",
        "id": 57,
        "mspv": 1,
        "size": 4,
        "struct": "4B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "vbatScale",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Scale / 10",
                "desc": "Sets `batteryMetersConfigMutable()->voltage.scale = value * 10` (if `USE_ADC`)."
            },
            {
                "name": "vbatMinCell",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0.1V",
                "desc": "Sets `currentBatteryProfileMutable->voltage.cellMin = value * 10` (if `USE_ADC`)."
            },
            {
                "name": "vbatMaxCell",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0.1V",
                "desc": "Sets `currentBatteryProfileMutable->voltage.cellMax = value * 10` (if `USE_ADC`)."
            },
            {
                "name": "vbatWarningCell",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0.1V",
                "desc": "Sets `currentBatteryProfileMutable->voltage.cellWarning = value * 10` (if `USE_ADC`)."
            }
        ],
        "deprecated": null,
        "description": "Sets legacy voltage meter configuration (scaled values)."
    },
    "MSP_SONAR_ALTITUDE": {
        "hex": "0x3a",
        "id": 58,
        "mspv": 1,
        "size": 4,
        "struct": "I",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "rangefinderAltitude",
                "ctype": "uint32_t",
                "size": 4,
                "units": "cm",
                "desc": "Latest altitude reading from the rangefinder (`rangefinderGetLatestAltitude()`). 0 if `USE_RANGEFINDER` disabled or no reading."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the altitude measured by the primary rangefinder (sonar or lidar)."
    },
    "MSP_RX_MAP": {
        "hex": "0x40",
        "id": 64,
        "mspv": 1,
        "size": null,
        "struct": null,
        "direction": 1,
        "variable_len": true,
        "payload": [
            {
                "name": "rcMap",
                "ctype": "uint8_t[MAX_MAPPABLE_RX_INPUTS]",
                "size": null,
                "units": "",
                "desc": "Array defining the mapping from input channel index to logical function (Roll, Pitch, Yaw, Throttle, Aux1...)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the RC channel mapping array (AETR, etc.)."
    },
    "MSP_SET_RX_MAP": {
        "hex": "0x41",
        "id": 65,
        "mspv": 1,
        "size": null,
        "struct": null,
        "direction": 0,
        "variable_len": true,
        "payload": [
            {
                "name": "rcMap",
                "ctype": "uint8_t[MAX_MAPPABLE_RX_INPUTS]",
                "size": null,
                "units": "",
                "desc": "Array defining the new channel mapping."
            }
        ],
        "deprecated": null,
        "description": "Sets the RC channel mapping array."
    },
    "MSP_REBOOT": {
        "hex": "0x44",
        "id": 68,
        "mspv": 1,
        "size": 0,
        "struct": null,
        "direction": 1,
        "variable_len": false,
        "payload": [],
        "deprecated": null,
        "description": "Commands the flight controller to reboot."
    },
    "MSP_DATAFLASH_SUMMARY": {
        "hex": "0x46",
        "id": 70,
        "mspv": 1,
        "size": 13,
        "struct": "B3I",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "flashReady",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Boolean: 1 if flash chip is ready, 0 otherwise. (`flashIsReady()`). 0 if `USE_FLASHFS` disabled."
            },
            {
                "name": "sectorCount",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Total number of sectors on the flash chip (`geometry->sectors`). 0 if `USE_FLASHFS` disabled."
            },
            {
                "name": "totalSize",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Total size of the flash chip in bytes (`geometry->totalSize`). 0 if `USE_FLASHFS` disabled."
            },
            {
                "name": "usedSize",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Currently used size in bytes (FlashFS offset) (`flashfsGetOffset()`). 0 if `USE_FLASHFS` disabled."
            }
        ],
        "deprecated": null,
        "description": "Retrieves summary information about the onboard dataflash chip (if present and used for Blackbox via FlashFS)."
    },
    "MSP_DATAFLASH_READ": {
        "hex": "0x47",
        "id": 71,
        "mspv": 1,
        "size": null,
        "struct": null,
        "direction": 2,
        "variable_len": true,
        "payload": [
            {
                "name": "address",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "The starting address from which data was actually read."
            },
            {
                "name": "data",
                "ctype": "uint8_t[]",
                "size": null,
                "units": "",
                "desc": "The data read from flash. Length is MIN(requested size, remaining buffer space, remaining flashfs data)."
            }
        ],
        "deprecated": null,
        "description": "Reads a block of data from the onboard dataflash (FlashFS)."
    },
    "MSP_DATAFLASH_ERASE": {
        "hex": "0x48",
        "id": 72,
        "mspv": 1,
        "size": 0,
        "struct": null,
        "direction": 0,
        "variable_len": false,
        "payload": [],
        "deprecated": null,
        "description": "Erases the entire onboard dataflash chip (FlashFS volume)."
    },
    "MSP_LOOP_TIME": {
        "hex": "0x49",
        "id": 73,
        "mspv": 1,
        "size": 2,
        "struct": "H",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "looptime",
                "ctype": "uint16_t",
                "size": 2,
                "units": "µs",
                "desc": "Configured loop time (`gyroConfig()->looptime`)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the configured loop time (PID loop frequency denominator)."
    },
    "MSP_SET_LOOP_TIME": {
        "hex": "0x4a",
        "id": 74,
        "mspv": 1,
        "size": 2,
        "struct": "H",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "looptime",
                "ctype": "uint16_t",
                "size": 2,
                "units": "µs",
                "desc": "New loop time to set (`gyroConfigMutable()->looptime`)."
            }
        ],
        "deprecated": null,
        "description": "Sets the configured loop time."
    },
    "MSP_FAILSAFE_CONFIG": {
        "hex": "0x4b",
        "id": 75,
        "mspv": 1,
        "size": 20,
        "struct": "2BHBH2B5HB",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "failsafeDelay",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0.1s",
                "desc": "Delay before failsafe stage 1 activates (`failsafeConfig()->failsafe_delay`)."
            },
            {
                "name": "failsafeOffDelay",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0.1s",
                "desc": "Delay after signal recovery before returning control (`failsafeConfig()->failsafe_off_delay`)."
            },
            {
                "name": "failsafeThrottle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Throttle level during failsafe stage 2 (`currentBatteryProfile->failsafe_throttle`)."
            },
            {
                "name": "legacyKillSwitch",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Legacy flag, always 0."
            },
            {
                "name": "failsafeThrottleLowDelay",
                "ctype": "uint16_t",
                "size": 2,
                "units": "ms",
                "desc": "Delay for throttle-based failsafe detection (`failsafeConfig()->failsafe_throttle_low_delay`)."
            },
            {
                "name": "failsafeProcedure",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Failsafe procedure (Drop, RTH, Land, etc.) (`failsafeConfig()->failsafe_procedure`).",
                "enum": "?_e"
            },
            {
                "name": "failsafeRecoveryDelay",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0.1s",
                "desc": "Delay after RTH finishes before attempting recovery (`failsafeConfig()->failsafe_recovery_delay`)."
            },
            {
                "name": "failsafeFWRollAngle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "deci-degrees",
                "desc": "Fixed wing failsafe roll angle (`failsafeConfig()->failsafe_fw_roll_angle`)."
            },
            {
                "name": "failsafeFWPitchAngle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "deci-degrees",
                "desc": "Fixed wing failsafe pitch angle (`failsafeConfig()->failsafe_fw_pitch_angle`)."
            },
            {
                "name": "failsafeFWYawRate",
                "ctype": "uint16_t",
                "size": 2,
                "units": "deg/s",
                "desc": "Fixed wing failsafe yaw rate (`failsafeConfig()->failsafe_fw_yaw_rate`)."
            },
            {
                "name": "failsafeStickThreshold",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM units",
                "desc": "Stick movement threshold to exit failsafe (`failsafeConfig()->failsafe_stick_motion_threshold`)."
            },
            {
                "name": "failsafeMinDistance",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "Minimum distance from home for RTH failsafe (`failsafeConfig()->failsafe_min_distance`)."
            },
            {
                "name": "failsafeMinDistanceProc",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Failsafe procedure if below min distance (`failsafeConfig()->failsafe_min_distance_procedure`).",
                "enum": "?_e"
            }
        ],
        "deprecated": null,
        "description": "Retrieves the failsafe configuration settings."
    },
    "MSP_SET_FAILSAFE_CONFIG": {
        "hex": "0x4c",
        "id": 76,
        "mspv": 1,
        "size": 20,
        "struct": "2BHBH2B5HB",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "failsafeDelay",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0.1s",
                "desc": "Sets `failsafeConfigMutable()->failsafe_delay`."
            },
            {
                "name": "failsafeOffDelay",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0.1s",
                "desc": "Sets `failsafeConfigMutable()->failsafe_off_delay`."
            },
            {
                "name": "failsafeThrottle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Sets `currentBatteryProfileMutable->failsafe_throttle`."
            },
            {
                "name": "legacyKillSwitch",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "failsafeThrottleLowDelay",
                "ctype": "uint16_t",
                "size": 2,
                "units": "ms",
                "desc": "Sets `failsafeConfigMutable()->failsafe_throttle_low_delay`."
            },
            {
                "name": "failsafeProcedure",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Sets `failsafeConfigMutable()->failsafe_procedure`.",
                "enum": "?_e"
            },
            {
                "name": "failsafeRecoveryDelay",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0.1s",
                "desc": "Sets `failsafeConfigMutable()->failsafe_recovery_delay`."
            },
            {
                "name": "failsafeFWRollAngle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "deci-degrees",
                "desc": "Sets `failsafeConfigMutable()->failsafe_fw_roll_angle` (casted to `int16_t`)."
            },
            {
                "name": "failsafeFWPitchAngle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "deci-degrees",
                "desc": "Sets `failsafeConfigMutable()->failsafe_fw_pitch_angle` (casted to `int16_t`)."
            },
            {
                "name": "failsafeFWYawRate",
                "ctype": "uint16_t",
                "size": 2,
                "units": "deg/s",
                "desc": "Sets `failsafeConfigMutable()->failsafe_fw_yaw_rate` (casted to `int16_t`)."
            },
            {
                "name": "failsafeStickThreshold",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM units",
                "desc": "Sets `failsafeConfigMutable()->failsafe_stick_motion_threshold`."
            },
            {
                "name": "failsafeMinDistance",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "Sets `failsafeConfigMutable()->failsafe_min_distance`."
            },
            {
                "name": "failsafeMinDistanceProc",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Sets `failsafeConfigMutable()->failsafe_min_distance_procedure`.",
                "enum": "?_e"
            }
        ],
        "deprecated": null,
        "description": "Sets the failsafe configuration settings."
    },
    "MSP_SDCARD_SUMMARY": {
        "hex": "0x4f",
        "id": 79,
        "mspv": 1,
        "size": 11,
        "struct": "3B2I",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "sdCardSupported",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Bitmask: Bit 0 = 1 if SD card support compiled in (`USE_SDCARD`)."
            },
            {
                "name": "sdCardState",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`mspSDCardState_e`): Current state (Not Present, Fatal, Card Init, FS Init, Ready). 0 if `USE_SDCARD` disabled.",
                "enum": "mspSDCardState_e"
            },
            {
                "name": "fsError",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Last filesystem error code (`afatfs_getLastError()`). 0 if `USE_SDCARD` disabled."
            },
            {
                "name": "freeSpaceKB",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Free space in KiB (`afatfs_getContiguousFreeSpace() / 1024`). 0 if `USE_SDCARD` disabled."
            },
            {
                "name": "totalSpaceKB",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Total space in KiB (`sdcard_getMetadata()->numBlocks / 2`). 0 if `USE_SDCARD` disabled."
            }
        ],
        "deprecated": null,
        "description": "Retrieves summary information about the SD card status and filesystem."
    },
    "MSP_BLACKBOX_CONFIG": {
        "hex": "0x50",
        "id": 80,
        "mspv": 1,
        "size": 4,
        "struct": "4B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "blackboxDevice",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Always 0 (API no longer supported)."
            },
            {
                "name": "blackboxRateNum",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Always 0."
            },
            {
                "name": "blackboxRateDenom",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Always 0."
            },
            {
                "name": "blackboxPDenom",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Always 0."
            }
        ],
        "deprecated": null,
        "description": "Legacy command to retrieve Blackbox configuration. Superseded by `MSP2_BLACKBOX_CONFIG`."
    },
    "MSP_SET_BLACKBOX_CONFIG": {
        "hex": "0x51",
        "id": 81,
        "mspv": 1,
        "size": 0,
        "struct": null,
        "direction": 0,
        "variable_len": false,
        "payload": [],
        "deprecated": null,
        "description": "Legacy command to set Blackbox configuration. Superseded by `MSP2_SET_BLACKBOX_CONFIG`."
    },
    "MSP_TRANSPONDER_CONFIG": {
        "hex": "0x52",
        "id": 82,
        "mspv": 1,
        "size": 0,
        "struct": null,
        "direction": 1,
        "variable_len": false,
        "payload": [],
        "deprecated": null,
        "description": "Get VTX Transponder settings (likely specific to RaceFlight/Betaflight, not standard INAV VTX)."
    },
    "MSP_SET_TRANSPONDER_CONFIG": {
        "hex": "0x53",
        "id": 83,
        "mspv": 1,
        "size": 0,
        "struct": null,
        "direction": 0,
        "variable_len": false,
        "payload": [],
        "deprecated": null,
        "description": "Set VTX Transponder settings."
    },
    "MSP_OSD_CONFIG": {
        "hex": "0x54",
        "id": 84,
        "mspv": 1,
        "size": null,
        "struct": null,
        "direction": 1,
        "variable_len": true,
        "payload": [
            {
                "name": "osdDriverType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "OSD_DRIVER_MAX7456` if `USE_OSD`, else `OSD_DRIVER_NONE`.",
                "enum": "?_e"
            },
            {
                "name": "videoSystem",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Video system (Auto/PAL/NTSC) (`osdConfig()->video_system`). Sent even if OSD disabled.",
                "enum": "?_e"
            },
            {
                "name": "units",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Measurement units (Metric/Imperial) (`osdConfig()->units`). Sent even if OSD disabled.",
                "enum": "?_e"
            },
            {
                "name": "rssiAlarm",
                "ctype": "uint8_t",
                "size": 1,
                "units": "%",
                "desc": "RSSI alarm threshold (`osdConfig()->rssi_alarm`). Sent even if OSD disabled."
            },
            {
                "name": "capAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "mAh/mWh",
                "desc": "Capacity alarm threshold (`currentBatteryProfile->capacity.warning`). Sent even if OSD disabled."
            },
            {
                "name": "timerAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "seconds",
                "desc": "Timer alarm threshold (`osdConfig()->time_alarm`). Sent even if OSD disabled."
            },
            {
                "name": "altAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "Altitude alarm threshold (`osdConfig()->alt_alarm`). Sent even if OSD disabled."
            },
            {
                "name": "distAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "Distance alarm threshold (`osdConfig()->dist_alarm`). Sent even if OSD disabled."
            },
            {
                "name": "negAltAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "Negative altitude alarm threshold (`osdConfig()->neg_alt_alarm`). Sent even if OSD disabled."
            },
            {
                "name": "itemPositions",
                "ctype": "uint16_t[OSD_ITEM_COUNT]",
                "size": null,
                "units": "Coordinates",
                "desc": "Packed X/Y position for each OSD item on screen 0 (`osdLayoutsConfig()->item_pos[0][i]`). Sent even if OSD disabled."
            }
        ],
        "deprecated": null,
        "description": "Retrieves OSD configuration settings and layout for screen 0."
    },
    "MSP_SET_OSD_CONFIG": {
        "hex": "0x55",
        "id": 85,
        "mspv": 1,
        "size": 14,
        "struct": "4B5H",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "addr",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Must be 0xFF (-1)."
            },
            {
                "name": "videoSystem",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Sets `osdConfigMutable()->video_system`.",
                "enum": "?_e"
            },
            {
                "name": "units",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Sets `osdConfigMutable()->units`.",
                "enum": "?_e"
            },
            {
                "name": "rssiAlarm",
                "ctype": "uint8_t",
                "size": 1,
                "units": "%",
                "desc": "Sets `osdConfigMutable()->rssi_alarm`."
            },
            {
                "name": "capAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "mAh/mWh",
                "desc": "Sets `currentBatteryProfileMutable->capacity.warning`."
            },
            {
                "name": "timerAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "seconds",
                "desc": "Sets `osdConfigMutable()->time_alarm`."
            },
            {
                "name": "altAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "Sets `osdConfigMutable()->alt_alarm`."
            },
            {
                "name": "distAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "(Optional) Sets `osdConfigMutable()->dist_alarm`."
            },
            {
                "name": "negAltAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "(Optional) Sets `osdConfigMutable()->neg_alt_alarm`."
            }
        ],
        "deprecated": null,
        "description": "Sets OSD configuration or a single item's position on screen 0."
    },
    "MSP_OSD_CHAR_READ": {
        "hex": "0x56",
        "id": 86,
        "mspv": 1,
        "size": 0,
        "struct": null,
        "direction": 1,
        "variable_len": false,
        "payload": [],
        "deprecated": null,
        "description": "Reads character data from the OSD font memory."
    },
    "MSP_OSD_CHAR_WRITE": {
        "hex": "0x57",
        "id": 87,
        "mspv": 1,
        "size": null,
        "struct": null,
        "direction": 0,
        "variable_len": true,
        "payload": [
            {
                "name": "address",
                "ctype": "uint8_t` or `uint16_t",
                "size": null,
                "units": "",
                "desc": "Starting address in font memory. Size depends on total payload size."
            },
            {
                "name": "charData",
                "ctype": "uint8_t[]",
                "size": null,
                "units": "",
                "desc": "Character bitmap data (54 or 64 bytes per char, depending on format)."
            }
        ],
        "deprecated": null,
        "description": "Writes character data to the OSD font memory."
    },
    "MSP_VTX_CONFIG": {
        "hex": "0x58",
        "id": 88,
        "mspv": 1,
        "size": 11,
        "struct": "11B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "vtxDeviceType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`VTXDEV_*`): Type of VTX device detected/configured. `VTXDEV_UNKNOWN` if none.",
                "enum": "VTXDEV_*"
            },
            {
                "name": "band",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "VTX band number (from `vtxSettingsConfig`)."
            },
            {
                "name": "channel",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "VTX channel number (from `vtxSettingsConfig`)."
            },
            {
                "name": "power",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "VTX power level index (from `vtxSettingsConfig`)."
            },
            {
                "name": "pitMode",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Boolean: 1 if VTX is currently in pit mode, 0 otherwise."
            },
            {
                "name": "vtxReady",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Boolean: 1 if VTX device reported ready, 0 otherwise."
            },
            {
                "name": "lowPowerDisarm",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Boolean: 1 if low power on disarm is enabled (from `vtxSettingsConfig`)."
            },
            {
                "name": "vtxTableAvailable",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Boolean: 1 if VTX tables (band/power) are available for query."
            },
            {
                "name": "bandCount",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Number of bands supported by the VTX device."
            },
            {
                "name": "channelCount",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Number of channels per band supported by the VTX device."
            },
            {
                "name": "powerCount",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Number of power levels supported by the VTX device."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the current VTX (Video Transmitter) configuration and capabilities."
    },
    "MSP_SET_VTX_CONFIG": {
        "hex": "0x59",
        "id": 89,
        "mspv": 1,
        "size": 2,
        "struct": "H",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "bandChannelEncoded",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Encoded band/channel value: `(band-1)*8 + (channel-1)`. If <= `VTXCOMMON_MSP_BANDCHAN_CHKVAL`."
            }
        ],
        "deprecated": null,
        "description": "Sets the VTX configuration (band, channel, power, pit mode). Supports multiple protocol versions/extensions based on payload size."
    },
    "MSP_ADVANCED_CONFIG": {
        "hex": "0x5a",
        "id": 90,
        "mspv": 1,
        "size": 9,
        "struct": "4B2HB",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "gyroSyncDenom",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Always 1 (BF compatibility)."
            },
            {
                "name": "pidProcessDenom",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Always 1 (BF compatibility)."
            },
            {
                "name": "useUnsyncedPwm",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Always 1 (BF compatibility, INAV uses async PWM based on protocol)."
            },
            {
                "name": "motorPwmProtocol",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum: Motor PWM protocol type (`motorConfig()->motorPwmProtocol`).",
                "enum": "motorConfig()->motorPwmProtocol"
            },
            {
                "name": "motorPwmRate",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Hz: Motor PWM rate (if applicable) (`motorConfig()->motorPwmRate`)."
            },
            {
                "name": "servoPwmRate",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Hz: Servo PWM rate (`servoConfig()->servoPwmRate`)."
            },
            {
                "name": "legacyGyroSync",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Always 0 (BF compatibility)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves advanced hardware-related configuration (PWM protocols, rates). Some fields are BF compatibility placeholders."
    },
    "MSP_SET_ADVANCED_CONFIG": {
        "hex": "0x5b",
        "id": 91,
        "mspv": 1,
        "size": 9,
        "struct": "4B2HB",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "gyroSyncDenom",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Ignored."
            },
            {
                "name": "pidProcessDenom",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Ignored."
            },
            {
                "name": "useUnsyncedPwm",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Ignored."
            },
            {
                "name": "motorPwmProtocol",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `motorConfigMutable()->motorPwmProtocol`."
            },
            {
                "name": "motorPwmRate",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Sets `motorConfigMutable()->motorPwmRate`."
            },
            {
                "name": "servoPwmRate",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Sets `servoConfigMutable()->servoPwmRate`."
            },
            {
                "name": "legacyGyroSync",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Ignored."
            }
        ],
        "deprecated": null,
        "description": "Sets advanced hardware-related configuration (PWM protocols, rates)."
    },
    "MSP_FILTER_CONFIG": {
        "hex": "0x5c",
        "id": 92,
        "mspv": 1,
        "size": 23,
        "struct": "B11H",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "gyroMainLpfHz",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Hz",
                "desc": "Gyro main low-pass filter cutoff frequency (`gyroConfig()->gyro_main_lpf_hz`)."
            },
            {
                "name": "dtermLpfHz",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Hz",
                "desc": "D-term low-pass filter cutoff frequency (`pidProfile()->dterm_lpf_hz`)."
            },
            {
                "name": "yawLpfHz",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Hz",
                "desc": "Yaw low-pass filter cutoff frequency (`pidProfile()->yaw_lpf_hz`)."
            },
            {
                "name": "legacyGyroNotchHz",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Always 0 (Legacy)."
            },
            {
                "name": "legacyGyroNotchCutoff",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Always 1 (Legacy)."
            },
            {
                "name": "bfCompatDtermNotchHz",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Always 0 (BF compatibility)."
            },
            {
                "name": "bfCompatDtermNotchCutoff",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Always 1 (BF compatibility)."
            },
            {
                "name": "bfCompatGyroNotch2Hz",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Always 0 (BF compatibility)."
            },
            {
                "name": "bfCompatGyroNotch2Cutoff",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Always 1 (BF compatibility)."
            },
            {
                "name": "accNotchHz",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Hz",
                "desc": "Accelerometer notch filter center frequency (`accelerometerConfig()->acc_notch_hz`)."
            },
            {
                "name": "accNotchCutoff",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Hz",
                "desc": "Accelerometer notch filter cutoff frequency (`accelerometerConfig()->acc_notch_cutoff`)."
            },
            {
                "name": "legacyGyroStage2LpfHz",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Always 0 (Legacy)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves filter configuration settings (Gyro, D-term, Yaw, Accel). Some fields are BF compatibility placeholders or legacy."
    },
    "MSP_SET_FILTER_CONFIG": {
        "hex": "0x5d",
        "id": 93,
        "mspv": 1,
        "size": 23,
        "struct": "B11H",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "gyroMainLpfHz",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Hz",
                "desc": "Sets `gyroConfigMutable()->gyro_main_lpf_hz`. (Size >= 5)"
            },
            {
                "name": "dtermLpfHz",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Hz",
                "desc": "Sets `pidProfileMutable()->dterm_lpf_hz` (constrained 0-500). (Size >= 5)"
            },
            {
                "name": "yawLpfHz",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Hz",
                "desc": "Sets `pidProfileMutable()->yaw_lpf_hz` (constrained 0-255). (Size >= 5)"
            },
            {
                "name": "legacyGyroNotchHz",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Ignored. (Size >= 9)"
            },
            {
                "name": "legacyGyroNotchCutoff",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Ignored. (Size >= 9)"
            },
            {
                "name": "bfCompatDtermNotchHz",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Ignored. (Size >= 13)"
            },
            {
                "name": "bfCompatDtermNotchCutoff",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Ignored. (Size >= 13)"
            },
            {
                "name": "bfCompatGyroNotch2Hz",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Ignored. (Size >= 17)"
            },
            {
                "name": "bfCompatGyroNotch2Cutoff",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Ignored. (Size >= 17)"
            },
            {
                "name": "accNotchHz",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Hz",
                "desc": "Sets `accelerometerConfigMutable()->acc_notch_hz` (constrained 0-255). (Size >= 21)"
            },
            {
                "name": "accNotchCutoff",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Hz",
                "desc": "Sets `accelerometerConfigMutable()->acc_notch_cutoff` (constrained 1-255). (Size >= 21)"
            },
            {
                "name": "legacyGyroStage2LpfHz",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Ignored. (Size >= 22)"
            }
        ],
        "deprecated": null,
        "description": "Sets filter configuration settings. Handles different payload lengths for backward compatibility."
    },
    "MSP_PID_ADVANCED": {
        "hex": "0x5e",
        "id": 94,
        "mspv": 1,
        "size": 17,
        "struct": "3H4BHB2H",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "legacyRollPitchItermIgnore",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Always 0 (Legacy)."
            },
            {
                "name": "legacyYawItermIgnore",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Always 0 (Legacy)."
            },
            {
                "name": "legacyYawPLimit",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Always 0 (Legacy)."
            },
            {
                "name": "bfCompatDeltaMethod",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Always 0 (BF compatibility)."
            },
            {
                "name": "bfCompatVbatPidComp",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Always 0 (BF compatibility)."
            },
            {
                "name": "bfCompatSetpointRelaxRatio",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Always 0 (BF compatibility)."
            },
            {
                "name": "reserved1",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Always 0."
            },
            {
                "name": "legacyPidSumLimit",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Always 0 (Legacy)."
            },
            {
                "name": "bfCompatItermThrottleGain",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Always 0 (BF compatibility)."
            },
            {
                "name": "accelLimitRollPitch",
                "ctype": "uint16_t",
                "size": 2,
                "units": "dps / 10",
                "desc": "Axis acceleration limit for Roll/Pitch / 10 (`pidProfile()->axisAccelerationLimitRollPitch / 10`)."
            },
            {
                "name": "accelLimitYaw",
                "ctype": "uint16_t",
                "size": 2,
                "units": "dps / 10",
                "desc": "Axis acceleration limit for Yaw / 10 (`pidProfile()->axisAccelerationLimitYaw / 10`)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves advanced PID tuning parameters. Many fields are BF compatibility placeholders."
    },
    "MSP_SET_PID_ADVANCED": {
        "hex": "0x5f",
        "id": 95,
        "mspv": 1,
        "size": 17,
        "struct": "3H4BHB2H",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "legacyRollPitchItermIgnore",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "legacyYawItermIgnore",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "legacyYawPLimit",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "bfCompatDeltaMethod",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "bfCompatVbatPidComp",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "bfCompatSetpointRelaxRatio",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "reserved1",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "legacyPidSumLimit",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "bfCompatItermThrottleGain",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "accelLimitRollPitch",
                "ctype": "uint16_t",
                "size": 2,
                "units": "dps / 10",
                "desc": "Sets `pidProfileMutable()->axisAccelerationLimitRollPitch = value * 10`."
            },
            {
                "name": "accelLimitYaw",
                "ctype": "uint16_t",
                "size": 2,
                "units": "dps / 10",
                "desc": "Sets `pidProfileMutable()->axisAccelerationLimitYaw = value * 10`."
            }
        ],
        "deprecated": null,
        "description": "Sets advanced PID tuning parameters."
    },
    "MSP_SENSOR_CONFIG": {
        "hex": "0x60",
        "id": 96,
        "mspv": 1,
        "size": 6,
        "struct": "6B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "accHardware",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`accHardware_e`): Accelerometer hardware type (`accelerometerConfig()->acc_hardware`).",
                "enum": "accHardware_e"
            },
            {
                "name": "baroHardware",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`baroHardware_e`): Barometer hardware type (`barometerConfig()->baro_hardware`). 0 if `USE_BARO` disabled.",
                "enum": "baroHardware_e"
            },
            {
                "name": "magHardware",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`magHardware_e`): Magnetometer hardware type (`compassConfig()->mag_hardware`). 0 if `USE_MAG` disabled.",
                "enum": "magHardware_e"
            },
            {
                "name": "pitotHardware",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`pitotHardware_e`): Pitot tube hardware type (`pitotmeterConfig()->pitot_hardware`). 0 if `USE_PITOT` disabled.",
                "enum": "pitotHardware_e"
            },
            {
                "name": "rangefinderHardware",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`rangefinderHardware_e`): Rangefinder hardware type (`rangefinderConfig()->rangefinder_hardware`). 0 if `USE_RANGEFINDER` disabled.",
                "enum": "rangefinderHardware_e"
            },
            {
                "name": "opflowHardware",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`opticalFlowHardware_e`): Optical flow hardware type (`opticalFlowConfig()->opflow_hardware`). 0 if `USE_OPFLOW` disabled.",
                "enum": "opticalFlowHardware_e"
            }
        ],
        "deprecated": null,
        "description": "Retrieves the configured hardware type for various sensors."
    },
    "MSP_SET_SENSOR_CONFIG": {
        "hex": "0x61",
        "id": 97,
        "mspv": 1,
        "size": 6,
        "struct": "6B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "accHardware",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `accelerometerConfigMutable()->acc_hardware`."
            },
            {
                "name": "baroHardware",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `barometerConfigMutable()->baro_hardware` (if `USE_BARO`)."
            },
            {
                "name": "magHardware",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `compassConfigMutable()->mag_hardware` (if `USE_MAG`)."
            },
            {
                "name": "pitotHardware",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `pitotmeterConfigMutable()->pitot_hardware` (if `USE_PITOT`)."
            },
            {
                "name": "rangefinderHardware",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `rangefinderConfigMutable()->rangefinder_hardware` (if `USE_RANGEFINDER`)."
            },
            {
                "name": "opflowHardware",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `opticalFlowConfigMutable()->opflow_hardware` (if `USE_OPFLOW`)."
            }
        ],
        "deprecated": null,
        "description": "Sets the configured hardware type for various sensors."
    },
    "MSP_SPECIAL_PARAMETERS": {
        "hex": "0x62",
        "id": 98,
        "mspv": 1,
        "size": 0,
        "struct": null,
        "direction": 1,
        "variable_len": false,
        "payload": [],
        "deprecated": null,
        "description": "Betaflight specific, likely unused/unimplemented in INAV."
    },
    "MSP_SET_SPECIAL_PARAMETERS": {
        "hex": "0x63",
        "id": 99,
        "mspv": 1,
        "size": 0,
        "struct": null,
        "direction": 0,
        "variable_len": false,
        "payload": [],
        "deprecated": null,
        "description": "Betaflight specific, likely unused/unimplemented in INAV."
    },
    "MSP_IDENT": {
        "hex": "0x64",
        "id": 100,
        "mspv": 1,
        "size": null,
        "struct": "3BI",
        "direction": 1,
        "variable_len": true,
        "payload": [
            {
                "name": "MultiWii version",
                "ctype": "uint8_t",
                "size": 1,
                "units": "n/a",
                "desc": "Scaled version major*100+minor"
            },
            {
                "name": "Mixer Mode",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enumeration",
                "desc": "Mixer type"
            },
            {
                "name": "MSP Version",
                "ctype": "uint8_t",
                "size": 1,
                "units": "n/a",
                "desc": "Scaled version major*100+minor"
            },
            {
                "name": "Platform Capability",
                "ctype": "uint32_t",
                "size": null,
                "units": "Bitmask of MW capabilities",
                "desc": ""
            }
        ],
        "deprecated": null,
        "description": "Provides basic flight controller identity information. Not implemented in modern INAV, but used by legacy versions and MultiWii."
    },
    "MSP_STATUS": {
        "hex": "0x65",
        "id": 101,
        "mspv": 1,
        "size": 11,
        "struct": "3HIB",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "cycleTime",
                "ctype": "uint16_t",
                "size": 2,
                "units": "µs",
                "desc": "Main loop cycle time (`cycleTime`)."
            },
            {
                "name": "i2cErrors",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Count",
                "desc": "Number of I2C errors encountered (`i2cGetErrorCounter()`). 0 if `USE_I2C` not defined."
            },
            {
                "name": "sensorStatus",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Bitmask",
                "desc": "Bitmask indicating available/active sensors (`packSensorStatus()`). See notes."
            },
            {
                "name": "activeModesLow",
                "ctype": "uint32_t",
                "size": 4,
                "units": "Bitmask",
                "desc": "First 32 bits of the active flight modes bitmask (`packBoxModeFlags()`)."
            },
            {
                "name": "profile",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Index",
                "desc": "Current configuration profile index (0-based) (`getConfigProfile()`)."
            }
        ],
        "deprecated": null,
        "description": "Provides basic flight controller status including cycle time, errors, sensor status, active modes (first 32), and the current configuration profile."
    },
    "MSP_RAW_IMU": {
        "hex": "0x66",
        "id": 102,
        "mspv": 1,
        "size": 18,
        "struct": "9h",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "accX",
                "ctype": "int16_t",
                "size": 2,
                "units": "~1/512 G",
                "desc": "Raw accelerometer X reading, scaled (`acc.accADCf[X] * 512`)."
            },
            {
                "name": "accY",
                "ctype": "int16_t",
                "size": 2,
                "units": "~1/512 G",
                "desc": "Raw accelerometer Y reading, scaled (`acc.accADCf[Y] * 512`)."
            },
            {
                "name": "accZ",
                "ctype": "int16_t",
                "size": 2,
                "units": "~1/512 G",
                "desc": "Raw accelerometer Z reading, scaled (`acc.accADCf[Z] * 512`)."
            },
            {
                "name": "gyroX",
                "ctype": "int16_t",
                "size": 2,
                "units": "deg/s",
                "desc": "Gyroscope X-axis rate (`gyroRateDps(X)`)."
            },
            {
                "name": "gyroY",
                "ctype": "int16_t",
                "size": 2,
                "units": "deg/s",
                "desc": "Gyroscope Y-axis rate (`gyroRateDps(Y)`)."
            },
            {
                "name": "gyroZ",
                "ctype": "int16_t",
                "size": 2,
                "units": "deg/s",
                "desc": "Gyroscope Z-axis rate (`gyroRateDps(Z)`)."
            },
            {
                "name": "magX",
                "ctype": "int16_t",
                "size": 2,
                "units": "Raw units",
                "desc": "Raw magnetometer X reading (`mag.magADC[X]`). 0 if `USE_MAG` disabled."
            },
            {
                "name": "magY",
                "ctype": "int16_t",
                "size": 2,
                "units": "Raw units",
                "desc": "Raw magnetometer Y reading (`mag.magADC[Y]`). 0 if `USE_MAG` disabled."
            },
            {
                "name": "magZ",
                "ctype": "int16_t",
                "size": 2,
                "units": "Raw units",
                "desc": "Raw magnetometer Z reading (`mag.magADC[Z]`). 0 if `USE_MAG` disabled."
            }
        ],
        "deprecated": null,
        "description": "Provides raw sensor readings from the IMU (Accelerometer, Gyroscope, Magnetometer)."
    },
    "MSP_SERVO": {
        "hex": "0x67",
        "id": 103,
        "mspv": 1,
        "size": null,
        "struct": null,
        "direction": 1,
        "variable_len": true,
        "payload": [
            {
                "name": "servoOutputs",
                "ctype": "int16_t[MAX_SUPPORTED_SERVOS]",
                "size": null,
                "units": "PWM",
                "desc": "Array of current servo output values (typically 1000-2000)."
            }
        ],
        "deprecated": null,
        "description": "Provides the current output values for all supported servos."
    },
    "MSP_MOTOR": {
        "hex": "0x68",
        "id": 104,
        "mspv": 1,
        "size": 16,
        "struct": "8H",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "motorOutputs",
                "ctype": "uint16_t[8]",
                "size": 16,
                "units": "PWM",
                "desc": "Array of current motor output values (typically 1000-2000). Values beyond `MAX_SUPPORTED_MOTORS` are 0."
            }
        ],
        "deprecated": null,
        "description": "Provides the current output values for the first 8 motors."
    },
    "MSP_RC": {
        "hex": "0x69",
        "id": 105,
        "mspv": 1,
        "size": null,
        "struct": null,
        "direction": 1,
        "variable_len": true,
        "payload": [
            {
                "name": "rcChannels",
                "ctype": "uint16_t[]",
                "size": null,
                "units": "PWM",
                "desc": "Array of current RC channel values (typically 1000-2000). Length depends on detected channels."
            }
        ],
        "deprecated": null,
        "description": "Provides the current values of the received RC channels."
    },
    "MSP_RAW_GPS": {
        "hex": "0x6a",
        "id": 106,
        "mspv": 1,
        "size": 18,
        "struct": "2B2i4H",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "fixType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "GPS fix type (`gpsSol.fixType`).",
                "enum": "?_e"
            },
            {
                "name": "numSat",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Count",
                "desc": "Number of satellites used in solution (`gpsSol.numSat`)."
            },
            {
                "name": "latitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "deg * 1e7",
                "desc": "Latitude (`gpsSol.llh.lat`)."
            },
            {
                "name": "longitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "deg * 1e7",
                "desc": "Longitude (`gpsSol.llh.lon`)."
            },
            {
                "name": "altitude",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "Altitude above MSL (`gpsSol.llh.alt / 100`)."
            },
            {
                "name": "speed",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Ground speed (`gpsSol.groundSpeed`)."
            },
            {
                "name": "groundCourse",
                "ctype": "uint16_t",
                "size": 2,
                "units": "deci-degrees",
                "desc": "Ground course (`gpsSol.groundCourse`)."
            },
            {
                "name": "hdop",
                "ctype": "uint16_t",
                "size": 2,
                "units": "HDOP * 100",
                "desc": "Horizontal Dilution of Precision (`gpsSol.hdop`)."
            }
        ],
        "deprecated": null,
        "description": "Provides raw GPS data (fix status, coordinates, altitude, speed, course)."
    },
    "MSP_COMP_GPS": {
        "hex": "0x6b",
        "id": 107,
        "mspv": 1,
        "size": 5,
        "struct": "2HB",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "distanceToHome",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "Distance to the home point (`GPS_distanceToHome`)."
            },
            {
                "name": "directionToHome",
                "ctype": "uint16_t",
                "size": 2,
                "units": "degrees",
                "desc": "Direction to the home point (0-360) (`GPS_directionToHome`)."
            },
            {
                "name": "gpsHeartbeat",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Boolean",
                "desc": "Indicates if GPS data is being received (`gpsSol.flags.gpsHeartbeat`)."
            }
        ],
        "deprecated": null,
        "description": "Provides computed GPS values: distance and direction to home."
    },
    "MSP_ATTITUDE": {
        "hex": "0x6c",
        "id": 108,
        "mspv": 1,
        "size": 6,
        "struct": "3h",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "roll",
                "ctype": "int16_t",
                "size": 2,
                "units": "deci-degrees",
                "desc": "Roll angle (`attitude.values.roll`)."
            },
            {
                "name": "pitch",
                "ctype": "int16_t",
                "size": 2,
                "units": "deci-degrees",
                "desc": "Pitch angle (`attitude.values.pitch`)."
            },
            {
                "name": "yaw",
                "ctype": "int16_t",
                "size": 2,
                "units": "degrees",
                "desc": "Yaw/Heading angle (`DECIDEGREES_TO_DEGREES(attitude.values.yaw)`)."
            }
        ],
        "deprecated": null,
        "description": "Provides the current attitude estimate (roll, pitch, yaw)."
    },
    "MSP_ALTITUDE": {
        "hex": "0x6d",
        "id": 109,
        "mspv": 1,
        "size": 10,
        "struct": "ihi",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "estimatedAltitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "cm",
                "desc": "Estimated altitude above home/sea level (`getEstimatedActualPosition(Z)`)."
            },
            {
                "name": "variometer",
                "ctype": "int16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Estimated vertical speed (`getEstimatedActualVelocity(Z)`)."
            },
            {
                "name": "baroAltitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "cm",
                "desc": "Latest raw altitude from barometer (`baroGetLatestAltitude()`). 0 if `USE_BARO` disabled."
            }
        ],
        "deprecated": null,
        "description": "Provides estimated altitude, vertical speed (variometer), and raw barometric altitude."
    },
    "MSP_ANALOG": {
        "hex": "0x6e",
        "id": 110,
        "mspv": 1,
        "size": 7,
        "struct": "B2Hh",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "vbat",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0.1V",
                "desc": "Battery voltage, scaled (`getBatteryVoltage() / 10`), constrained 0-255."
            },
            {
                "name": "mAhDrawn",
                "ctype": "uint16_t",
                "size": 2,
                "units": "mAh",
                "desc": "Consumed battery capacity (`getMAhDrawn()`), constrained 0-65535."
            },
            {
                "name": "rssi",
                "ctype": "uint16_t",
                "size": 2,
                "units": "0-1023 or %",
                "desc": "Received Signal Strength Indicator (`getRSSI()`). Units depend on source."
            },
            {
                "name": "amperage",
                "ctype": "int16_t",
                "size": 2,
                "units": "0.01A",
                "desc": "Current draw (`getAmperage()`), constrained -32768 to 32767."
            }
        ],
        "deprecated": null,
        "description": "Provides analog sensor readings: battery voltage, current consumption (mAh), RSSI, and current draw (Amps)."
    },
    "MSP_RC_TUNING": {
        "hex": "0x6f",
        "id": 111,
        "mspv": 1,
        "size": 11,
        "struct": "8BHB",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "legacyRcRate",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Always 100 (Legacy, unused)."
            },
            {
                "name": "rcExpo",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Roll/Pitch RC Expo (`currentControlRateProfile->stabilized.rcExpo8`)."
            },
            {
                "name": "rollRate",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Roll Rate (`currentControlRateProfile->stabilized.rates[FD_ROLL]`)."
            },
            {
                "name": "pitchRate",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Pitch Rate (`currentControlRateProfile->stabilized.rates[FD_PITCH]`)."
            },
            {
                "name": "yawRate",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Yaw Rate (`currentControlRateProfile->stabilized.rates[FD_YAW]`)."
            },
            {
                "name": "dynamicThrottlePID",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Dynamic Throttle PID (TPA) value (`currentControlRateProfile->throttle.dynPID`)."
            },
            {
                "name": "throttleMid",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Throttle Midpoint (`currentControlRateProfile->throttle.rcMid8`)."
            },
            {
                "name": "throttleExpo",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Throttle Expo (`currentControlRateProfile->throttle.rcExpo8`)."
            },
            {
                "name": "tpaBreakpoint",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Throttle PID Attenuation (TPA) breakpoint (`currentControlRateProfile->throttle.pa_breakpoint`)."
            },
            {
                "name": "rcYawExpo",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Yaw RC Expo (`currentControlRateProfile->stabilized.rcYawExpo8`)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves RC tuning parameters (rates, expos, TPA) for the current control rate profile."
    },
    "MSP_ACTIVEBOXES": {
        "hex": "0x71",
        "id": 113,
        "mspv": 1,
        "size": null,
        "struct": "Q",
        "direction": 1,
        "variable_len": true,
        "payload": [
            {
                "name": "activeModes",
                "ctype": "boxBitmask_t",
                "size": null,
                "units": "",
                "desc": "Bitmask of all active modes (`packBoxModeFlags()`). Size depends on `boxBitmask_t` definition."
            }
        ],
        "deprecated": null,
        "description": "Provides the full bitmask of currently active flight modes (boxes)."
    },
    "MSP_MISC": {
        "hex": "0x72",
        "id": 114,
        "mspv": 1,
        "size": 22,
        "struct": "5H6BH4B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "midRc",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Mid RC value (`PWM_RANGE_MIDDLE`, typically 1500)."
            },
            {
                "name": "legacyMinThrottle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Always 0 (Legacy)."
            },
            {
                "name": "maxThrottle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Maximum throttle command (`getMaxThrottle()`)."
            },
            {
                "name": "minCommand",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Minimum motor command when disarmed (`motorConfig()->mincommand`)."
            },
            {
                "name": "failsafeThrottle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Failsafe throttle level (`currentBatteryProfile->failsafe_throttle`)."
            },
            {
                "name": "gpsType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "GPS provider type (`gpsConfig()->provider`). 0 if `USE_GPS` disabled.",
                "enum": "?_e"
            },
            {
                "name": "legacyGpsBaud",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Always 0 (Legacy)."
            },
            {
                "name": "gpsSbasMode",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "GPS SBAS mode (`gpsConfig()->sbasMode`). 0 if `USE_GPS` disabled.",
                "enum": "?_e"
            },
            {
                "name": "legacyMwCurrentOut",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Always 0 (Legacy)."
            },
            {
                "name": "rssiChannel",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Index",
                "desc": "RSSI channel index (1-based) (`rxConfig()->rssi_channel`)."
            },
            {
                "name": "reserved1",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Always 0."
            },
            {
                "name": "magDeclination",
                "ctype": "uint16_t",
                "size": 2,
                "units": "0.1 degrees",
                "desc": "Magnetic declination / 10 (`compassConfig()->mag_declination / 10`). 0 if `USE_MAG` disabled."
            },
            {
                "name": "vbatScale",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Scale / 10",
                "desc": "Voltage scale / 10 (`batteryMetersConfig()->voltage.scale / 10`). 0 if `USE_ADC` disabled."
            },
            {
                "name": "vbatMinCell",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0.1V",
                "desc": "Min cell voltage / 10 (`currentBatteryProfile->voltage.cellMin / 10`). 0 if `USE_ADC` disabled."
            },
            {
                "name": "vbatMaxCell",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0.1V",
                "desc": "Max cell voltage / 10 (`currentBatteryProfile->voltage.cellMax / 10`). 0 if `USE_ADC` disabled."
            },
            {
                "name": "vbatWarningCell",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0.1V",
                "desc": "Warning cell voltage / 10 (`currentBatteryProfile->voltage.cellWarning / 10`). 0 if `USE_ADC` disabled."
            }
        ],
        "deprecated": null,
        "description": "Retrieves miscellaneous configuration settings, mostly related to RC, GPS, Mag, and Battery voltage (legacy formats)."
    },
    "MSP_BOXNAMES": {
        "hex": "0x74",
        "id": 116,
        "mspv": 1,
        "size": null,
        "struct": null,
        "direction": 1,
        "variable_len": true,
        "payload": [
            {
                "name": "boxNamesString",
                "ctype": "char[]",
                "size": null,
                "units": "",
                "desc": "String containing mode names separated by ';'. Null termination not guaranteed by MSP, relies on payload size. (`serializeBoxNamesReply()`)."
            }
        ],
        "deprecated": null,
        "description": "Provides a semicolon-separated string containing the names of all available flight modes (boxes)."
    },
    "MSP_PIDNAMES": {
        "hex": "0x75",
        "id": 117,
        "mspv": 1,
        "size": null,
        "struct": null,
        "direction": 1,
        "variable_len": true,
        "payload": [
            {
                "name": "pidNamesString",
                "ctype": "char[]",
                "size": null,
                "units": "",
                "desc": "String \"ROLL;PITCH;YAW;ALT;Pos;PosR;NavR;LEVEL;MAG;VEL;\". Null termination not guaranteed by MSP."
            }
        ],
        "deprecated": null,
        "description": "Provides a semicolon-separated string containing the names of the PID controllers."
    },
    "MSP_WP": {
        "hex": "0x76",
        "id": 118,
        "mspv": 1,
        "size": 21,
        "struct": "2B3i3HB",
        "direction": 2,
        "variable_len": false,
        "payload": [
            {
                "name": "waypointIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Index",
                "desc": "Index of the returned waypoint."
            },
            {
                "name": "action",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Waypoint action type (`navWaypointAction_e`).",
                "enum": "?_e"
            },
            {
                "name": "latitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "deg * 1e7",
                "desc": "Latitude coordinate."
            },
            {
                "name": "longitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "deg * 1e7",
                "desc": "Longitude coordinate."
            },
            {
                "name": "altitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "cm",
                "desc": "Altitude coordinate (relative to home or sea level, see flag)."
            },
            {
                "name": "param1",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Varies",
                "desc": "Parameter 1 (meaning depends on action)."
            },
            {
                "name": "param2",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Varies",
                "desc": "Parameter 2 (meaning depends on action)."
            },
            {
                "name": "param3",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Varies",
                "desc": "Parameter 3 (meaning depends on action)."
            },
            {
                "name": "flag",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Bitmask",
                "desc": "Waypoint flags (`NAV_WP_FLAG_*`)."
            }
        ],
        "deprecated": null,
        "description": "Get/Set a single waypoint from the mission plan."
    },
    "MSP_BOXIDS": {
        "hex": "0x77",
        "id": 119,
        "mspv": 1,
        "size": null,
        "struct": null,
        "direction": 1,
        "variable_len": true,
        "payload": [
            {
                "name": "boxIds",
                "ctype": "uint8_t[]",
                "size": null,
                "units": "",
                "desc": "Array of permanent IDs for each configured box (`serializeBoxReply()`). Length depends on number of boxes."
            }
        ],
        "deprecated": null,
        "description": "Provides a list of permanent IDs associated with the available flight modes (boxes)."
    },
    "MSP_SERVO_CONFIGURATIONS": {
        "hex": "0x78",
        "id": 120,
        "mspv": 1,
        "size": 14,
        "struct": "3H4BI",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "min",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Minimum servo endpoint (`servoParams(i)->min`)."
            },
            {
                "name": "max",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Maximum servo endpoint (`servoParams(i)->max`)."
            },
            {
                "name": "middle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Middle/Neutral servo position (`servoParams(i)->middle`)."
            },
            {
                "name": "rate",
                "ctype": "uint8_t",
                "size": 1,
                "units": "% (-100 to 100)",
                "desc": "Servo rate/scaling (`servoParams(i)->rate`)."
            },
            {
                "name": "reserved1",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Always 0."
            },
            {
                "name": "reserved2",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Always 0."
            },
            {
                "name": "legacyForwardChan",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Always 255 (Legacy)."
            },
            {
                "name": "legacyReversedSources",
                "ctype": "uint32_t",
                "size": 4,
                "units": "-",
                "desc": "Always 0 (Legacy)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the configuration parameters for all supported servos (min, max, middle, rate). Legacy format with unused fields."
    },
    "MSP_NAV_STATUS": {
        "hex": "0x79",
        "id": 121,
        "mspv": 1,
        "size": 7,
        "struct": "5Bh",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "navMode",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`NAV_MODE_*`): Current navigation mode (None, RTH, WP, Hold, etc.) (`NAV_Status.mode`).",
                "enum": "NAV_MODE_*"
            },
            {
                "name": "navState",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`NAV_STATE_*`): Current navigation state (`NAV_Status.state`).",
                "enum": "NAV_STATE_*"
            },
            {
                "name": "activeWpAction",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`navWaypointAction_e`): Action of the currently executing waypoint (`NAV_Status.activeWpAction`).",
                "enum": "navWaypointAction_e"
            },
            {
                "name": "activeWpNumber",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Index: Index of the currently executing waypoint (`NAV_Status.activeWpNumber`)."
            },
            {
                "name": "navError",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`NAV_ERROR_*`): Current navigation error code (`NAV_Status.error`).",
                "enum": "NAV_ERROR_*"
            },
            {
                "name": "targetHeading",
                "ctype": "int16_t",
                "size": 2,
                "units": "",
                "desc": "degrees: Target heading for heading controller (`getHeadingHoldTarget()`)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the current status of the navigation system."
    },
    "MSP_NAV_CONFIG": {
        "implemented": false
    },
    "MSP_3D": {
        "hex": "0x7c",
        "id": 124,
        "mspv": 1,
        "size": 6,
        "struct": "3H",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "deadbandLow",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Lower deadband limit for 3D mode (`reversibleMotorsConfig()->deadband_low`)."
            },
            {
                "name": "deadbandHigh",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Upper deadband limit for 3D mode (`reversibleMotorsConfig()->deadband_high`)."
            },
            {
                "name": "neutral",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Neutral throttle point for 3D mode (`reversibleMotorsConfig()->neutral`)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves settings related to 3D/reversible motor operation."
    },
    "MSP_RC_DEADBAND": {
        "hex": "0x7d",
        "id": 125,
        "mspv": 1,
        "size": 5,
        "struct": "3BH",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "deadband",
                "ctype": "uint8_t",
                "size": 1,
                "units": "PWM",
                "desc": "General RC deadband for Roll/Pitch (`rcControlsConfig()->deadband`)."
            },
            {
                "name": "yawDeadband",
                "ctype": "uint8_t",
                "size": 1,
                "units": "PWM",
                "desc": "Specific deadband for Yaw (`rcControlsConfig()->yaw_deadband`)."
            },
            {
                "name": "altHoldDeadband",
                "ctype": "uint8_t",
                "size": 1,
                "units": "PWM",
                "desc": "Deadband for altitude hold adjustments (`rcControlsConfig()->alt_hold_deadband`)."
            },
            {
                "name": "throttleDeadband",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Deadband around throttle mid-stick (`rcControlsConfig()->mid_throttle_deadband`)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves RC input deadband settings."
    },
    "MSP_SENSOR_ALIGNMENT": {
        "hex": "0x7e",
        "id": 126,
        "mspv": 1,
        "size": 4,
        "struct": "4B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "gyroAlign",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Always 0 (Legacy alignment enum)."
            },
            {
                "name": "accAlign",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Always 0 (Legacy alignment enum)."
            },
            {
                "name": "magAlign",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Magnetometer alignment (`compassConfig()->mag_align`). 0 if `USE_MAG` disabled."
            },
            {
                "name": "opflowAlign",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Optical flow alignment (`opticalFlowConfig()->opflow_align`). 0 if `USE_OPFLOW` disabled."
            }
        ],
        "deprecated": null,
        "description": "Retrieves sensor alignment settings (legacy format)."
    },
    "MSP_LED_STRIP_MODECOLOR": {
        "hex": "0x7f",
        "id": 127,
        "mspv": 1,
        "size": 3,
        "struct": "3B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "modeIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Index of the LED mode (`ledModeIndex_e`). `LED_MODE_COUNT` for special colors."
            },
            {
                "name": "directionOrSpecialIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Index of the direction (`ledDirection_e`) or special color (`ledSpecialColor_e`)."
            },
            {
                "name": "colorIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Index of the color assigned from `ledStripConfig()->colors`."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the color index assigned to each LED mode and function/direction combination, including special colors."
    },
    "MSP_BATTERY_STATE": {
        "hex": "0x82",
        "id": 130,
        "mspv": 1,
        "size": 11,
        "struct": "BHBHhBH",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "cellCount",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Count",
                "desc": "Number of battery cells (`getBatteryCellCount()`)."
            },
            {
                "name": "capacity",
                "ctype": "uint16_t",
                "size": 2,
                "units": "mAh",
                "desc": "Battery capacity (`currentBatteryProfile->capacity.value`)."
            },
            {
                "name": "vbatScaled",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0.1V",
                "desc": "Battery voltage / 10 (`getBatteryVoltage() / 10`)."
            },
            {
                "name": "mAhDrawn",
                "ctype": "uint16_t",
                "size": 2,
                "units": "mAh",
                "desc": "Consumed capacity (`getMAhDrawn()`)."
            },
            {
                "name": "amperage",
                "ctype": "int16_t",
                "size": 2,
                "units": "0.01A",
                "desc": "Current draw (`getAmperage()`)."
            },
            {
                "name": "batteryState",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Current battery state (`getBatteryState()`, see `BATTERY_STATE_*`).",
                "enum": "?_e"
            },
            {
                "name": "vbatActual",
                "ctype": "uint16_t",
                "size": 2,
                "units": "0.01V",
                "desc": "Actual battery voltage (`getBatteryVoltage()`)."
            }
        ],
        "deprecated": null,
        "description": "Provides battery state information, formatted primarily for DJI FPV Goggles compatibility."
    },
    "MSP_VTXTABLE_BAND": {
        "hex": "0x89",
        "id": 137,
        "mspv": 1,
        "size": 0,
        "struct": null,
        "direction": 2,
        "variable_len": false,
        "payload": [],
        "deprecated": null,
        "description": "Retrieves information about a specific VTX band from the VTX table. (Implementation missing in provided `fc_msp.c`)"
    },
    "MSP_VTXTABLE_POWERLEVEL": {
        "hex": "0x8a",
        "id": 138,
        "mspv": 1,
        "size": null,
        "struct": null,
        "direction": 2,
        "variable_len": true,
        "payload": [
            {
                "name": "powerLevelIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "1-based index of the returned power level."
            },
            {
                "name": "powerValue",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Always 0 (Actual power value in mW is not stored/returned via MSP)."
            },
            {
                "name": "labelLength",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Length of the power level label string that follows."
            },
            {
                "name": "label",
                "ctype": "char[]",
                "size": null,
                "units": "",
                "desc": "Power level label string (e.g., \"25\", \"200\"). Length given by previous field."
            }
        ],
        "deprecated": null,
        "description": "Retrieves information about a specific VTX power level from the VTX table."
    },
    "MSP_SET_RAW_RC": {
        "hex": "0xc8",
        "id": 200,
        "mspv": 1,
        "size": null,
        "struct": null,
        "direction": 0,
        "variable_len": true,
        "payload": [
            {
                "name": "rcChannels",
                "ctype": "uint16_t[]",
                "size": null,
                "units": "PWM",
                "desc": "Array of RC channel values (typically 1000-2000). Number of channels determined by payload size."
            }
        ],
        "deprecated": null,
        "description": "Provides raw RC channel data to the flight controller, typically used when the receiver is connected via MSP (e.g., MSP RX feature)."
    },
    "MSP_SET_RAW_GPS": {
        "hex": "0xc9",
        "id": 201,
        "mspv": 1,
        "size": 16,
        "struct": "2B2ih2H",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "fixType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "GPS fix type.",
                "enum": "?_e"
            },
            {
                "name": "numSat",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Count",
                "desc": "Number of satellites."
            },
            {
                "name": "latitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "deg * 1e7",
                "desc": "Latitude."
            },
            {
                "name": "longitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "deg * 1e7",
                "desc": "Longitude."
            },
            {
                "name": "altitude",
                "ctype": "int16_t",
                "size": 2,
                "units": "meters",
                "desc": "Altitude (converted to cm internally)."
            },
            {
                "name": "speed",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Ground speed."
            },
            {
                "name": "groundCourse",
                "ctype": "uint16_t",
                "size": 2,
                "units": "???",
                "desc": "Ground course (units unclear from code, likely degrees or deci-degrees, ignored in current code)."
            }
        ],
        "deprecated": null,
        "description": "Provides raw GPS data to the flight controller, typically for simulation or external GPS injection."
    },
    "MSP_SET_BOX": {
        "hex": "0xcb",
        "id": 203,
        "mspv": 1,
        "size": 0,
        "struct": null,
        "direction": 0,
        "variable_len": false,
        "payload": [],
        "deprecated": null,
        "description": "Sets the state of flight modes (boxes). (Likely unused/obsolete in INAV)."
    },
    "MSP_SET_RC_TUNING": {
        "hex": "0xcc",
        "id": 204,
        "mspv": 1,
        "size": 11,
        "struct": "8BHB",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "legacyRcRate",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Ignored."
            },
            {
                "name": "rcExpo",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `currentControlRateProfile->stabilized.rcExpo8`."
            },
            {
                "name": "rollRate",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `currentControlRateProfile->stabilized.rates[FD_ROLL]` (constrained)."
            },
            {
                "name": "pitchRate",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `currentControlRateProfile->stabilized.rates[FD_PITCH]` (constrained)."
            },
            {
                "name": "yawRate",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `currentControlRateProfile->stabilized.rates[FD_YAW]` (constrained)."
            },
            {
                "name": "dynamicThrottlePID",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `currentControlRateProfile->throttle.dynPID` (constrained)."
            },
            {
                "name": "throttleMid",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `currentControlRateProfile->throttle.rcMid8`."
            },
            {
                "name": "throttleExpo",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `currentControlRateProfile->throttle.rcExpo8`."
            },
            {
                "name": "tpaBreakpoint",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Sets `currentControlRateProfile->throttle.pa_breakpoint`."
            },
            {
                "name": "rcYawExpo",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "(Optional) Sets `currentControlRateProfile->stabilized.rcYawExpo8`."
            }
        ],
        "deprecated": null,
        "description": "Sets RC tuning parameters (rates, expos, TPA) for the current control rate profile."
    },
    "MSP_ACC_CALIBRATION": {
        "hex": "0xcd",
        "id": 205,
        "mspv": 1,
        "size": 0,
        "struct": null,
        "direction": 0,
        "variable_len": false,
        "payload": [],
        "deprecated": null,
        "description": "Starts the accelerometer calibration procedure."
    },
    "MSP_MAG_CALIBRATION": {
        "hex": "0xce",
        "id": 206,
        "mspv": 1,
        "size": 0,
        "struct": null,
        "direction": 0,
        "variable_len": false,
        "payload": [],
        "deprecated": null,
        "description": "Starts the magnetometer calibration procedure."
    },
    "MSP_SET_MISC": {
        "hex": "0xcf",
        "id": 207,
        "mspv": 1,
        "size": 22,
        "struct": "5H6BH4B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "midRc",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Ignored."
            },
            {
                "name": "legacyMinThrottle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "legacyMaxThrottle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "minCommand",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Sets `motorConfigMutable()->mincommand` (constrained 0-PWM_RANGE_MAX)."
            },
            {
                "name": "failsafeThrottle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Sets `currentBatteryProfileMutable->failsafe_throttle` (constrained PWM_RANGE_MIN/MAX)."
            },
            {
                "name": "gpsType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Sets `gpsConfigMutable()->provider` (if `USE_GPS`).",
                "enum": "?_e"
            },
            {
                "name": "legacyGpsBaud",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "gpsSbasMode",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Sets `gpsConfigMutable()->sbasMode` (if `USE_GPS`).",
                "enum": "?_e"
            },
            {
                "name": "legacyMwCurrentOut",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "rssiChannel",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Index",
                "desc": "Sets `rxConfigMutable()->rssi_channel` (constrained 0-MAX_SUPPORTED_RC_CHANNEL_COUNT). Updates source."
            },
            {
                "name": "reserved1",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "magDeclination",
                "ctype": "uint16_t",
                "size": 2,
                "units": "0.1 degrees",
                "desc": "Sets `compassConfigMutable()->mag_declination = value * 10` (if `USE_MAG`)."
            },
            {
                "name": "vbatScale",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Scale / 10",
                "desc": "Sets `batteryMetersConfigMutable()->voltage.scale = value * 10` (if `USE_ADC`)."
            },
            {
                "name": "vbatMinCell",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0.1V",
                "desc": "Sets `currentBatteryProfileMutable->voltage.cellMin = value * 10` (if `USE_ADC`)."
            },
            {
                "name": "vbatMaxCell",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0.1V",
                "desc": "Sets `currentBatteryProfileMutable->voltage.cellMax = value * 10` (if `USE_ADC`)."
            },
            {
                "name": "vbatWarningCell",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0.1V",
                "desc": "Sets `currentBatteryProfileMutable->voltage.cellWarning = value * 10` (if `USE_ADC`)."
            }
        ],
        "deprecated": null,
        "description": "Sets miscellaneous configuration settings (legacy formats/scaling)."
    },
    "MSP_RESET_CONF": {
        "hex": "0xd0",
        "id": 208,
        "mspv": 1,
        "size": 0,
        "struct": null,
        "direction": 0,
        "variable_len": false,
        "payload": [],
        "deprecated": null,
        "description": "Resets all configuration settings to their default values and saves to EEPROM."
    },
    "MSP_SET_WP": {
        "hex": "0xd1",
        "id": 209,
        "mspv": 1,
        "size": 21,
        "struct": "2B3i3HB",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "waypointIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Index",
                "desc": "Index of the waypoint to set (0 to `NAV_MAX_WAYPOINTS - 1`)."
            },
            {
                "name": "action",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Waypoint action type.",
                "enum": "?_e"
            },
            {
                "name": "latitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "deg * 1e7",
                "desc": "Latitude coordinate."
            },
            {
                "name": "longitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "deg * 1e7",
                "desc": "Longitude coordinate."
            },
            {
                "name": "altitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "cm",
                "desc": "Altitude coordinate."
            },
            {
                "name": "param1",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Varies",
                "desc": "Parameter 1."
            },
            {
                "name": "param2",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Varies",
                "desc": "Parameter 2."
            },
            {
                "name": "param3",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Varies",
                "desc": "Parameter 3."
            },
            {
                "name": "flag",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Bitmask",
                "desc": "Waypoint flags."
            }
        ],
        "deprecated": null,
        "description": "Sets a single waypoint in the mission plan."
    },
    "MSP_SELECT_SETTING": {
        "hex": "0xd2",
        "id": 210,
        "mspv": 1,
        "size": 1,
        "struct": "B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "profileIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Index of the profile to activate (0-based)."
            }
        ],
        "deprecated": null,
        "description": "Selects the active configuration profile and saves it."
    },
    "MSP_SET_HEAD": {
        "hex": "0xd3",
        "id": 211,
        "mspv": 1,
        "size": 2,
        "struct": "h",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "heading",
                "ctype": "int16_t",
                "size": 2,
                "units": "degrees",
                "desc": "Target heading (0-359)."
            }
        ],
        "deprecated": null,
        "description": "Sets the target heading for the heading hold controller (e.g., during MAG mode)."
    },
    "MSP_SET_SERVO_CONFIGURATION": {
        "hex": "0xd4",
        "id": 212,
        "mspv": 1,
        "size": 15,
        "struct": "B3H4BI",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "servoIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Index",
                "desc": "Index of the servo to configure (0 to `MAX_SUPPORTED_SERVOS - 1`)."
            },
            {
                "name": "min",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Minimum servo endpoint."
            },
            {
                "name": "max",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Maximum servo endpoint."
            },
            {
                "name": "middle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Middle/Neutral servo position."
            },
            {
                "name": "rate",
                "ctype": "uint8_t",
                "size": 1,
                "units": "%",
                "desc": "Servo rate/scaling."
            },
            {
                "name": "reserved1",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "reserved2",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "legacyForwardChan",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "legacyReversedSources",
                "ctype": "uint32_t",
                "size": 4,
                "units": "-",
                "desc": "Ignored."
            }
        ],
        "deprecated": null,
        "description": "Sets the configuration for a single servo (legacy format)."
    },
    "MSP_SET_MOTOR": {
        "hex": "0xd6",
        "id": 214,
        "mspv": 1,
        "size": 16,
        "struct": "8H",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "motorValues",
                "ctype": "uint16_t[8]",
                "size": 16,
                "units": "PWM",
                "desc": "Array of motor values to set when disarmed. Only affects first `MAX_SUPPORTED_MOTORS`."
            }
        ],
        "deprecated": null,
        "description": "Sets the disarmed motor values, typically used for motor testing or propeller balancing functions in a configurator."
    },
    "MSP_SET_NAV_CONFIG": {
        "implemented": false
    },
    "MSP_SET_3D": {
        "hex": "0xd9",
        "id": 217,
        "mspv": 1,
        "size": 6,
        "struct": "3H",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "deadbandLow",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Sets `reversibleMotorsConfigMutable()->deadband_low`."
            },
            {
                "name": "deadbandHigh",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Sets `reversibleMotorsConfigMutable()->deadband_high`."
            },
            {
                "name": "neutral",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Sets `reversibleMotorsConfigMutable()->neutral`."
            }
        ],
        "deprecated": null,
        "description": "Sets parameters related to 3D/reversible motor operation."
    },
    "MSP_SET_RC_DEADBAND": {
        "hex": "0xda",
        "id": 218,
        "mspv": 1,
        "size": 5,
        "struct": "3BH",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "deadband",
                "ctype": "uint8_t",
                "size": 1,
                "units": "PWM",
                "desc": "Sets `rcControlsConfigMutable()->deadband`."
            },
            {
                "name": "yawDeadband",
                "ctype": "uint8_t",
                "size": 1,
                "units": "PWM",
                "desc": "Sets `rcControlsConfigMutable()->yaw_deadband`."
            },
            {
                "name": "altHoldDeadband",
                "ctype": "uint8_t",
                "size": 1,
                "units": "PWM",
                "desc": "Sets `rcControlsConfigMutable()->alt_hold_deadband`."
            },
            {
                "name": "throttleDeadband",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Sets `rcControlsConfigMutable()->mid_throttle_deadband`."
            }
        ],
        "deprecated": null,
        "description": "Sets RC input deadband values."
    },
    "MSP_SET_RESET_CURR_PID": {
        "hex": "0xdb",
        "id": 219,
        "mspv": 1,
        "size": 0,
        "struct": null,
        "direction": 0,
        "variable_len": false,
        "payload": [],
        "deprecated": null,
        "description": "Resets the PIDs of the *current* profile to their default values. Does not save."
    },
    "MSP_SET_SENSOR_ALIGNMENT": {
        "hex": "0xdc",
        "id": 220,
        "mspv": 1,
        "size": 4,
        "struct": "4B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "gyroAlign",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Ignored."
            },
            {
                "name": "accAlign",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Ignored."
            },
            {
                "name": "magAlign",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `compassConfigMutable()->mag_align` (if `USE_MAG`)."
            },
            {
                "name": "opflowAlign",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `opticalFlowConfigMutable()->opflow_align` (if `USE_OPFLOW`)."
            }
        ],
        "deprecated": null,
        "description": "Sets sensor alignment (legacy format)."
    },
    "MSP_SET_LED_STRIP_MODECOLOR": {
        "hex": "0xdd",
        "id": 221,
        "mspv": 1,
        "size": 3,
        "struct": "3B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "modeIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Index of the LED mode (`ledModeIndex_e` or `LED_MODE_COUNT` for special)."
            },
            {
                "name": "directionOrSpecialIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Index of the direction or special color."
            },
            {
                "name": "colorIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Index of the color to assign from `ledStripConfig()->colors`."
            }
        ],
        "deprecated": null,
        "description": "Sets the color index for a specific LED mode/function combination."
    },
    "MSP_SET_ACC_TRIM": {
        "hex": "0xef",
        "id": 239,
        "mspv": 1,
        "size": 0,
        "struct": null,
        "direction": 0,
        "variable_len": false,
        "payload": [],
        "deprecated": null,
        "description": "Sets the accelerometer trim values (leveling calibration)."
    },
    "MSP_ACC_TRIM": {
        "hex": "0xf0",
        "id": 240,
        "mspv": 1,
        "size": 0,
        "struct": null,
        "direction": 1,
        "variable_len": false,
        "payload": [],
        "deprecated": null,
        "description": "Gets the accelerometer trim values."
    },
    "MSP_SERVO_MIX_RULES": {
        "hex": "0xf1",
        "id": 241,
        "mspv": 1,
        "size": 8,
        "struct": "2BH4B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "targetChannel",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Index",
                "desc": "Servo output channel index (0-based)."
            },
            {
                "name": "inputSource",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Input source for the mix (RC chan, Roll, Pitch...). See `mixerSource_t`.",
                "enum": "?_e"
            },
            {
                "name": "rate",
                "ctype": "uint16_t",
                "size": 2,
                "units": "% * 100?",
                "desc": "Mixing rate/weight. Needs scaling check."
            },
            {
                "name": "speed",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0-100",
                "desc": "Speed/Slew rate limit."
            },
            {
                "name": "reserved1",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Always 0."
            },
            {
                "name": "legacyMax",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Always 100 (Legacy)."
            },
            {
                "name": "legacyBox",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Always 0 (Legacy)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the custom servo mixer rules (legacy format)."
    },
    "MSP_SET_SERVO_MIX_RULE": {
        "hex": "0xf2",
        "id": 242,
        "mspv": 1,
        "size": 9,
        "struct": "3BHBHB",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "ruleIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Index",
                "desc": "Index of the rule to set (0 to `MAX_SERVO_RULES - 1`)."
            },
            {
                "name": "targetChannel",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Index",
                "desc": "Servo output channel index."
            },
            {
                "name": "inputSource",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Input source for the mix.",
                "enum": "?_e"
            },
            {
                "name": "rate",
                "ctype": "uint16_t",
                "size": 2,
                "units": "% * 100?",
                "desc": "Mixing rate/weight."
            },
            {
                "name": "speed",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0-100",
                "desc": "Speed/Slew rate limit."
            },
            {
                "name": "legacyMinMax",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "legacyBox",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Ignored."
            }
        ],
        "deprecated": null,
        "description": "Sets a single custom servo mixer rule (legacy format)."
    },
    "MSP_SET_PASSTHROUGH": {
        "hex": "0xf5",
        "id": 245,
        "mspv": 1,
        "size": 1,
        "struct": "B",
        "direction": 2,
        "variable_len": false,
        "payload": [
            {
                "name": "status",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "1 if passthrough started successfully, 0 on error (e.g., port not found). For 4way, returns number of ESCs found."
            }
        ],
        "deprecated": null,
        "description": "Enables serial passthrough mode to peripherals like ESCs (BLHeli 4-way) or other serial devices."
    },
    "MSP_RTC": {
        "hex": "0xf6",
        "id": 246,
        "mspv": 1,
        "size": 6,
        "struct": "iH",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "seconds",
                "ctype": "int32_t",
                "size": 4,
                "units": "Seconds",
                "desc": "Seconds since epoch (or relative time if not set). 0 if RTC time unknown."
            },
            {
                "name": "millis",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Milliseconds",
                "desc": "Millisecond part of the time. 0 if RTC time unknown."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the current Real-Time Clock time."
    },
    "MSP_SET_RTC": {
        "hex": "0xf7",
        "id": 247,
        "mspv": 1,
        "size": 6,
        "struct": "iH",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "seconds",
                "ctype": "int32_t",
                "size": 4,
                "units": "Seconds",
                "desc": "Seconds component of time to set."
            },
            {
                "name": "millis",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Milliseconds",
                "desc": "Millisecond component of time to set."
            }
        ],
        "deprecated": null,
        "description": "Sets the Real-Time Clock time."
    },
    "MSP_EEPROM_WRITE": {
        "hex": "0xfa",
        "id": 250,
        "mspv": 1,
        "size": 0,
        "struct": null,
        "direction": 0,
        "variable_len": false,
        "payload": [],
        "deprecated": null,
        "description": "Saves the current configuration from RAM to non-volatile memory (EEPROM/Flash)."
    },
    "MSP_DEBUGMSG": {
        "hex": "0xfd",
        "id": 253,
        "mspv": 1,
        "size": null,
        "struct": null,
        "direction": 1,
        "variable_len": true,
        "payload": [
            {
                "name": "Message Text",
                "ctype": "char[]",
                "size": null,
                "units": "",
                "desc": "NUL` terminated [debug message](https://github.com/iNavFlight/inav/blob/master/docs/development/serial_printf_debugging.md) text."
            }
        ],
        "deprecated": null,
        "description": "Retrieves debug (\"serial printf\") messages from the firmware."
    },
    "MSP_DEBUG": {
        "hex": "0xfe",
        "id": 254,
        "mspv": 1,
        "size": 8,
        "struct": "4H",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "debugValues",
                "ctype": "uint16_t[4]",
                "size": 8,
                "units": "",
                "desc": "First 4 values from the `debug` array."
            }
        ],
        "deprecated": null,
        "description": "Retrieves values from the firmware's `debug[]` array (legacy 16-bit version)."
    },
    "MSP_V2_FRAME": {
        "hex": "0xff",
        "id": 255,
        "mspv": 1,
        "size": 0,
        "struct": null,
        "direction": -1,
        "variable_len": false,
        "payload": [],
        "deprecated": null,
        "description": "This ID is used as a *payload indicator* within an MSPv1 message structure (`$M>`) to signify that the following payload conforms to the MSPv2 format. It's not a command itself."
    },
    "MSP_STATUS_EX": {
        "hex": "0x96",
        "id": 150,
        "mspv": 1,
        "size": 16,
        "struct": "3HIB2HB",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "cycleTime",
                "ctype": "uint16_t",
                "size": 2,
                "units": "µs",
                "desc": "Main loop cycle time."
            },
            {
                "name": "i2cErrors",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Count",
                "desc": "I2C errors."
            },
            {
                "name": "sensorStatus",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Bitmask",
                "desc": "Sensor status bitmask."
            },
            {
                "name": "activeModesLow",
                "ctype": "uint32_t",
                "size": 4,
                "units": "Bitmask",
                "desc": "First 32 active modes."
            },
            {
                "name": "profile",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Index",
                "desc": "Current config profile index."
            },
            {
                "name": "cpuLoad",
                "ctype": "uint16_t",
                "size": 2,
                "units": "%",
                "desc": "Average system load percentage (`averageSystemLoadPercent`)."
            },
            {
                "name": "armingFlags",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Bitmask",
                "desc": "Flight controller arming flags (`armingFlags`). Note: Truncated to 16 bits."
            },
            {
                "name": "accCalibAxisFlags",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Bitmask",
                "desc": "Accelerometer calibrated axes flags (`accGetCalibrationAxisFlags()`)."
            }
        ],
        "deprecated": null,
        "description": "Provides extended flight controller status, including CPU load, arming flags, and calibration status, in addition to `MSP_STATUS` fields."
    },
    "MSP_SENSOR_STATUS": {
        "hex": "0x97",
        "id": 151,
        "mspv": 1,
        "size": 9,
        "struct": "9B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "overallHealth",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Boolean",
                "desc": "1 if all essential hardware is healthy, 0 otherwise (`isHardwareHealthy()`)."
            },
            {
                "name": "gyroStatus",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Gyro hardware status (`getHwGyroStatus()`).",
                "enum": "?_e"
            },
            {
                "name": "accStatus",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Accelerometer hardware status (`getHwAccelerometerStatus()`).",
                "enum": "?_e"
            },
            {
                "name": "magStatus",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Compass hardware status (`getHwCompassStatus()`).",
                "enum": "?_e"
            },
            {
                "name": "baroStatus",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Barometer hardware status (`getHwBarometerStatus()`).",
                "enum": "?_e"
            },
            {
                "name": "gpsStatus",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "GPS hardware status (`getHwGPSStatus()`).",
                "enum": "?_e"
            },
            {
                "name": "rangefinderStatus",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Rangefinder hardware status (`getHwRangefinderStatus()`).",
                "enum": "?_e"
            },
            {
                "name": "pitotStatus",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Pitot hardware status (`getHwPitotmeterStatus()`).",
                "enum": "?_e"
            },
            {
                "name": "opflowStatus",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Optical Flow hardware status (`getHwOpticalFlowStatus()`).",
                "enum": "?_e"
            }
        ],
        "deprecated": null,
        "description": "Provides the hardware status for each individual sensor system."
    },
    "MSP_UID": {
        "hex": "0xa0",
        "id": 160,
        "mspv": 1,
        "size": 12,
        "struct": "3I",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "uid0",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "First 32 bits of the unique ID (`U_ID_0`)."
            },
            {
                "name": "uid1",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Middle 32 bits of the unique ID (`U_ID_1`)."
            },
            {
                "name": "uid2",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Last 32 bits of the unique ID (`U_ID_2`)."
            }
        ],
        "deprecated": null,
        "description": "Provides the unique identifier of the microcontroller."
    },
    "MSP_GPSSVINFO": {
        "hex": "0xa4",
        "id": 164,
        "mspv": 1,
        "size": 4,
        "struct": "4B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "protocolVersion",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Always 1 (Stub version)."
            },
            {
                "name": "numChannels",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Always 0 (Number of SV info channels reported)."
            },
            {
                "name": "hdopHundreds",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "HDOP / 100 (`gpsSol.hdop / 100`)."
            },
            {
                "name": "hdopUnits",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "HDOP / 100 (`gpsSol.hdop / 100`)."
            }
        ],
        "deprecated": null,
        "description": "Provides satellite signal strength information (legacy U-Blox compatibility stub)."
    },
    "MSP_GPSSTATISTICS": {
        "hex": "0xa6",
        "id": 166,
        "mspv": 1,
        "size": 20,
        "struct": "H3I3H",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "lastMessageDt",
                "ctype": "uint16_t",
                "size": 2,
                "units": "ms",
                "desc": "Time since last valid GPS message (`gpsStats.lastMessageDt`)."
            },
            {
                "name": "errors",
                "ctype": "uint32_t",
                "size": 4,
                "units": "Count",
                "desc": "Number of GPS communication errors (`gpsStats.errors`)."
            },
            {
                "name": "timeouts",
                "ctype": "uint32_t",
                "size": 4,
                "units": "Count",
                "desc": "Number of GPS communication timeouts (`gpsStats.timeouts`)."
            },
            {
                "name": "packetCount",
                "ctype": "uint32_t",
                "size": 4,
                "units": "Count",
                "desc": "Number of valid GPS packets received (`gpsStats.packetCount`)."
            },
            {
                "name": "hdop",
                "ctype": "uint16_t",
                "size": 2,
                "units": "HDOP * 100",
                "desc": "Horizontal Dilution of Precision (`gpsSol.hdop`)."
            },
            {
                "name": "eph",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm",
                "desc": "Estimated Horizontal Position Accuracy (`gpsSol.eph`)."
            },
            {
                "name": "epv",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm",
                "desc": "Estimated Vertical Position Accuracy (`gpsSol.epv`)."
            }
        ],
        "deprecated": null,
        "description": "Provides debugging statistics for the GPS communication link."
    },
    "MSP_TX_INFO": {
        "hex": "0xbb",
        "id": 187,
        "mspv": 1,
        "size": 2,
        "struct": "2B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "rssiSource",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum: Source of the RSSI value (`getRSSISource()`).",
                "enum": "getRSSISource()"
            },
            {
                "name": "rtcDateTimeIsSet",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Boolean: 1 if the RTC has been set, 0 otherwise."
            }
        ],
        "deprecated": null,
        "description": "Provides information potentially useful for transmitter LUA scripts."
    },
    "MSP_SET_TX_INFO": {
        "hex": "0xba",
        "id": 186,
        "mspv": 1,
        "size": 1,
        "struct": "B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "rssi",
                "ctype": "uint8_t",
                "size": 1,
                "units": "%",
                "desc": "RSSI value (0-100) provided by the external source."
            }
        ],
        "deprecated": null,
        "description": "Allows a transmitter LUA script (or similar) to send runtime information (currently only RSSI) to the firmware."
    },
    "MSP2_COMMON_TZ": {
        "hex": "0x1001",
        "id": 4097,
        "mspv": 2,
        "size": 3,
        "struct": "hB",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "tzOffsetMinutes",
                "ctype": "int16_t",
                "size": 2,
                "units": "Minutes",
                "desc": "Time zone offset from UTC (`timeConfig()->tz_offset`)."
            },
            {
                "name": "tzAutoDst",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Boolean",
                "desc": "Automatic daylight saving time enabled (`timeConfig()->tz_automatic_dst`)."
            }
        ],
        "deprecated": null,
        "description": "Gets the time zone offset configuration."
    },
    "MSP2_COMMON_SET_TZ": {
        "hex": "0x1002",
        "id": 4098,
        "mspv": 2,
        "size": 2,
        "struct": "h",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "tzOffsetMinutes",
                "ctype": "int16_t",
                "size": 2,
                "units": "Minutes",
                "desc": "Sets `timeConfigMutable()->tz_offset`."
            }
        ],
        "deprecated": null,
        "description": "Sets the time zone offset configuration."
    },
    "MSP2_COMMON_SETTING": {
        "hex": "0x1003",
        "id": 4099,
        "mspv": 2,
        "size": null,
        "struct": null,
        "direction": 2,
        "variable_len": true,
        "payload": [
            {
                "name": "settingValue",
                "ctype": "uint8_t[]",
                "size": null,
                "units": "",
                "desc": "Raw byte value of the setting. Size depends on the setting's type (`settingGetValueSize()`)."
            }
        ],
        "deprecated": null,
        "description": "Gets the value of a specific configuration setting, identified by name or index."
    },
    "MSP2_COMMON_SET_SETTING": {
        "hex": "0x1004",
        "id": 4100,
        "mspv": 2,
        "size": null,
        "struct": null,
        "direction": 0,
        "variable_len": true,
        "payload": [
            {
                "name": "settingIdentifier",
                "ctype": "Varies",
                "size": null,
                "units": "",
                "desc": "Setting name (null-terminated string) OR Index (0x00 followed by `uint16_t` index)."
            },
            {
                "name": "settingValue",
                "ctype": "uint8_t[]",
                "size": null,
                "units": "",
                "desc": "Raw byte value to set for the setting. Size must match the setting's type."
            }
        ],
        "deprecated": null,
        "description": "Sets the value of a specific configuration setting, identified by name or index."
    },
    "MSP2_COMMON_MOTOR_MIXER": {
        "hex": "0x1005",
        "id": 4101,
        "mspv": 2,
        "size": 8,
        "struct": "4H",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "throttleWeight",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Scaled (0-4000)",
                "desc": "Throttle weight * 1000, offset by 2000. (Range -2.0 to +2.0 -> 0 to 4000)."
            },
            {
                "name": "rollWeight",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Scaled (0-4000)",
                "desc": "Roll weight * 1000, offset by 2000."
            },
            {
                "name": "pitchWeight",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Scaled (0-4000)",
                "desc": "Pitch weight * 1000, offset by 2000."
            },
            {
                "name": "yawWeight",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Scaled (0-4000)",
                "desc": "Yaw weight * 1000, offset by 2000."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the current motor mixer configuration (throttle, roll, pitch, yaw weights for each motor) for the primary and secondary mixer profiles."
    },
    "MSP2_COMMON_SET_MOTOR_MIXER": {
        "hex": "0x1006",
        "id": 4102,
        "mspv": 2,
        "size": 9,
        "struct": "B4H",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "motorIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Index",
                "desc": "Index of the motor to configure (0 to `MAX_SUPPORTED_MOTORS - 1`)."
            },
            {
                "name": "throttleWeight",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Scaled (0-4000)",
                "desc": "Sets throttle weight from `(value / 1000.0) - 2.0`."
            },
            {
                "name": "rollWeight",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Scaled (0-4000)",
                "desc": "Sets roll weight from `(value / 1000.0) - 2.0`."
            },
            {
                "name": "pitchWeight",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Scaled (0-4000)",
                "desc": "Sets pitch weight from `(value / 1000.0) - 2.0`."
            },
            {
                "name": "yawWeight",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Scaled (0-4000)",
                "desc": "Sets yaw weight from `(value / 1000.0) - 2.0`."
            }
        ],
        "deprecated": null,
        "description": "Sets the motor mixer weights for a single motor in the primary mixer profile."
    },
    "MSP2_COMMON_SETTING_INFO": {
        "hex": "0x1007",
        "id": 4103,
        "mspv": 2,
        "size": null,
        "struct": null,
        "direction": 2,
        "variable_len": true,
        "payload": [
            {
                "name": "settingName",
                "ctype": "char[]",
                "size": null,
                "units": "",
                "desc": "Null-terminated setting name."
            },
            {
                "name": "pgn",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Parameter Group Number (PGN) ID."
            },
            {
                "name": "type",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Variable type (`VAR_UINT8`, `VAR_FLOAT`, etc.)."
            },
            {
                "name": "section",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Setting section (`MASTER_VALUE`, `PROFILE_VALUE`, etc.)."
            },
            {
                "name": "mode",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Setting mode (`MODE_NORMAL`, `MODE_LOOKUP`, etc.)."
            },
            {
                "name": "minValue",
                "ctype": "int32_t",
                "size": 4,
                "units": "",
                "desc": "Minimum allowed value (as signed 32-bit)."
            },
            {
                "name": "maxValue",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Maximum allowed value (as unsigned 32-bit)."
            },
            {
                "name": "settingIndex",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Absolute index of the setting."
            },
            {
                "name": "profileIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Current profile index (if applicable, else 0)."
            },
            {
                "name": "profileCount",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Total number of profiles (if applicable, else 0)."
            },
            {
                "name": "lookupNames",
                "ctype": "char[]",
                "size": null,
                "units": "",
                "desc": "(If `mode == MODE_LOOKUP`) Series of null-terminated strings for each possible value from min to max."
            },
            {
                "name": "settingValue",
                "ctype": "uint8_t[]",
                "size": null,
                "units": "",
                "desc": "Current raw byte value of the setting."
            }
        ],
        "deprecated": null,
        "description": "Gets detailed information about a specific configuration setting (name, type, range, flags, current value, etc.)."
    },
    "MSP2_COMMON_PG_LIST": {
        "hex": "0x1008",
        "id": 4104,
        "mspv": 2,
        "size": 6,
        "struct": "3H",
        "direction": 2,
        "variable_len": false,
        "payload": [
            {
                "name": "pgn",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Parameter Group Number (PGN) ID."
            },
            {
                "name": "startIndex",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Absolute index of the first setting in this group."
            },
            {
                "name": "endIndex",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Absolute index of the last setting in this group."
            }
        ],
        "deprecated": null,
        "description": "Gets a list of Parameter Group Numbers (PGNs) used by settings, along with the start and end setting indexes for each group. Can request info for a single PGN."
    },
    "MSP2_COMMON_SERIAL_CONFIG": {
        "hex": "0x1009",
        "id": 4105,
        "mspv": 2,
        "size": 9,
        "struct": "BI4B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "identifier",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Port identifier (`serialPortIdentifier_e`)."
            },
            {
                "name": "functionMask",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Bitmask of enabled functions (`FUNCTION_*`)."
            },
            {
                "name": "mspBaudIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Baud rate index for MSP function."
            },
            {
                "name": "gpsBaudIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Baud rate index for GPS function."
            },
            {
                "name": "telemetryBaudIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Baud rate index for Telemetry function."
            },
            {
                "name": "peripheralBaudIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Baud rate index for other peripheral functions."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the configuration for all available serial ports."
    },
    "MSP2_COMMON_SET_SERIAL_CONFIG": {
        "hex": "0x100a",
        "id": 4106,
        "mspv": 2,
        "size": 9,
        "struct": "BI4B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "identifier",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Port identifier (`serialPortIdentifier_e`)."
            },
            {
                "name": "functionMask",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Bitmask of functions to enable."
            },
            {
                "name": "mspBaudIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Baud rate index for MSP."
            },
            {
                "name": "gpsBaudIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Baud rate index for GPS."
            },
            {
                "name": "telemetryBaudIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Baud rate index for Telemetry."
            },
            {
                "name": "peripheralBaudIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Baud rate index for peripherals."
            }
        ],
        "deprecated": null,
        "description": "Sets the configuration for one or more serial ports."
    },
    "MSP2_COMMON_SET_RADAR_POS": {
        "hex": "0x100b",
        "id": 4107,
        "mspv": 2,
        "size": 19,
        "struct": "2B3ihHB",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "poiIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Index",
                "desc": "Index of the POI slot (0 to `RADAR_MAX_POIS - 1`)."
            },
            {
                "name": "state",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Status of the POI (0=undefined, 1=armed, 2=lost).",
                "enum": "?_e"
            },
            {
                "name": "latitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "deg * 1e7",
                "desc": "Latitude of the POI."
            },
            {
                "name": "longitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "deg * 1e7",
                "desc": "Longitude of the POI."
            },
            {
                "name": "altitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "cm",
                "desc": "Altitude of the POI."
            },
            {
                "name": "heading",
                "ctype": "int16_t",
                "size": 2,
                "units": "degrees",
                "desc": "Heading of the POI."
            },
            {
                "name": "speed",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Speed of the POI."
            },
            {
                "name": "linkQuality",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0-4",
                "desc": "Link quality indicator."
            }
        ],
        "deprecated": null,
        "description": "Sets the position and status information for a \"radar\" Point of Interest (POI). Used for displaying other craft/objects on the OSD map."
    },
    "MSP2_COMMON_SET_RADAR_ITD": {
        "hex": "0x100c",
        "id": 4108,
        "mspv": 2,
        "size": 0,
        "struct": null,
        "direction": 0,
        "variable_len": false,
        "payload": [],
        "deprecated": null,
        "description": "Sets radar information to display (likely internal/unused)."
    },
    "MSP2_COMMON_SET_MSP_RC_LINK_STATS": {
        "hex": "0x100d",
        "id": 4109,
        "mspv": 2,
        "size": 7,
        "struct": "6Bb",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "sublinkID",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Sublink identifier (usually 0)."
            },
            {
                "name": "validLink",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Boolean",
                "desc": "Indicates if the link is currently valid (not in failsafe)."
            },
            {
                "name": "rssiPercent",
                "ctype": "uint8_t",
                "size": 1,
                "units": "%",
                "desc": "Uplink RSSI percentage (0-100)."
            },
            {
                "name": "uplinkRSSI_dBm",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-dBm",
                "desc": "Uplink RSSI in dBm (sent as positive, e.g., 70 means -70dBm)."
            },
            {
                "name": "downlinkLQ",
                "ctype": "uint8_t",
                "size": 1,
                "units": "%",
                "desc": "Downlink Link Quality (0-100)."
            },
            {
                "name": "uplinkLQ",
                "ctype": "uint8_t",
                "size": 1,
                "units": "%",
                "desc": "Uplink Link Quality (0-100)."
            },
            {
                "name": "uplinkSNR",
                "ctype": "int8_t",
                "size": 1,
                "units": "dB",
                "desc": "Uplink Signal-to-Noise Ratio."
            }
        ],
        "deprecated": null,
        "description": "Provides RC link statistics (RSSI, LQ) to the FC, typically from an MSP-based RC link (like ExpressLRS). Sent periodically by the RC link."
    },
    "MSP2_COMMON_SET_MSP_RC_INFO": {
        "hex": "0x100e",
        "id": 4110,
        "mspv": 2,
        "size": 15,
        "struct": "B2H4s6s",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "sublinkID",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Sublink identifier (usually 0)."
            },
            {
                "name": "uplinkTxPower",
                "ctype": "uint16_t",
                "size": 2,
                "units": "mW?",
                "desc": "Uplink transmitter power level."
            },
            {
                "name": "downlinkTxPower",
                "ctype": "uint16_t",
                "size": 2,
                "units": "mW?",
                "desc": "Downlink transmitter power level."
            },
            {
                "name": "band",
                "ctype": "char[4]",
                "size": 4,
                "units": "-",
                "desc": "Operating band string (e.g., \"2G4\", \"900\")."
            },
            {
                "name": "mode",
                "ctype": "char[6]",
                "size": 6,
                "units": "-",
                "desc": "Operating mode/rate string (e.g., \"100HZ\", \"F1000\")."
            }
        ],
        "deprecated": null,
        "description": "Provides additional RC link information (power levels, band, mode) to the FC from an MSP-based RC link. Sent less frequently than link stats."
    },
    "MSP2_INAV_STATUS": {
        "hex": "0x2000",
        "id": 8192,
        "mspv": 2,
        "size": null,
        "struct": "4HBIQB",
        "direction": 1,
        "variable_len": true,
        "payload": [
            {
                "name": "cycleTime",
                "ctype": "uint16_t",
                "size": 2,
                "units": "µs",
                "desc": "Main loop cycle time."
            },
            {
                "name": "i2cErrors",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Count",
                "desc": "I2C errors."
            },
            {
                "name": "sensorStatus",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Bitmask",
                "desc": "Sensor status bitmask."
            },
            {
                "name": "cpuLoad",
                "ctype": "uint16_t",
                "size": 2,
                "units": "%",
                "desc": "Average system load percentage."
            },
            {
                "name": "profileAndBattProfile",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Packed",
                "desc": "Bits 0-3: Config profile index (`getConfigProfile()`), Bits 4-7: Battery profile index (`getConfigBatteryProfile()`)."
            },
            {
                "name": "armingFlags",
                "ctype": "uint32_t",
                "size": 4,
                "units": "Bitmask",
                "desc": "Full 32-bit flight controller arming flags (`armingFlags`)."
            },
            {
                "name": "activeModes",
                "ctype": "boxBitmask_t",
                "size": null,
                "units": "Bitmask",
                "desc": "Full bitmask of active flight modes (`packBoxModeFlags()`)."
            },
            {
                "name": "mixerProfile",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Index",
                "desc": "Current mixer profile index (`getConfigMixerProfile()`)."
            }
        ],
        "deprecated": null,
        "description": "Provides comprehensive flight controller status, extending `MSP_STATUS_EX` with full arming flags, battery profile, and mixer profile."
    },
    "MSP2_INAV_OPTICAL_FLOW": {
        "hex": "0x2001",
        "id": 8193,
        "mspv": 2,
        "size": 9,
        "struct": "B4h",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "quality",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0-255",
                "desc": "Raw quality indicator from the sensor (`opflow.rawQuality`). 0 if `USE_OPFLOW` disabled."
            },
            {
                "name": "flowRateX",
                "ctype": "int16_t",
                "size": 2,
                "units": "degrees/s",
                "desc": "Optical flow rate X (roll axis) (`RADIANS_TO_DEGREES(opflow.flowRate[X])`). 0 if `USE_OPFLOW` disabled."
            },
            {
                "name": "flowRateY",
                "ctype": "int16_t",
                "size": 2,
                "units": "degrees/s",
                "desc": "Optical flow rate Y (pitch axis) (`RADIANS_TO_DEGREES(opflow.flowRate[Y])`). 0 if `USE_OPFLOW` disabled."
            },
            {
                "name": "bodyRateX",
                "ctype": "int16_t",
                "size": 2,
                "units": "degrees/s",
                "desc": "Compensated body rate X (roll axis) (`RADIANS_TO_DEGREES(opflow.bodyRate[X])`). 0 if `USE_OPFLOW` disabled."
            },
            {
                "name": "bodyRateY",
                "ctype": "int16_t",
                "size": 2,
                "units": "degrees/s",
                "desc": "Compensated body rate Y (pitch axis) (`RADIANS_TO_DEGREES(opflow.bodyRate[Y])`). 0 if `USE_OPFLOW` disabled."
            }
        ],
        "deprecated": null,
        "description": "Provides data from the optical flow sensor."
    },
    "MSP2_INAV_ANALOG": {
        "hex": "0x2002",
        "id": 8194,
        "mspv": 2,
        "size": 24,
        "struct": "B2H4IBH",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "batteryFlags",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Bitmask",
                "desc": "Battery status flags: Bit 0=Full on plug-in, Bit 1=Use capacity threshold, Bit 2-3=Battery State enum (`getBatteryState()`), Bit 4-7=Cell Count (`getBatteryCellCount()`).",
                "enum": "getBatteryState()"
            },
            {
                "name": "vbat",
                "ctype": "uint16_t",
                "size": 2,
                "units": "0.01V",
                "desc": "Battery voltage (`getBatteryVoltage()`)."
            },
            {
                "name": "amperage",
                "ctype": "uint16_t",
                "size": 2,
                "units": "0.01A",
                "desc": "Current draw (`getAmperage()`)."
            },
            {
                "name": "powerDraw",
                "ctype": "uint32_t",
                "size": 4,
                "units": "mW",
                "desc": "Power draw (`getPower()`)."
            },
            {
                "name": "mAhDrawn",
                "ctype": "uint32_t",
                "size": 4,
                "units": "mAh",
                "desc": "Consumed capacity (`getMAhDrawn()`)."
            },
            {
                "name": "mWhDrawn",
                "ctype": "uint32_t",
                "size": 4,
                "units": "mWh",
                "desc": "Consumed energy (`getMWhDrawn()`)."
            },
            {
                "name": "remainingCapacity",
                "ctype": "uint32_t",
                "size": 4,
                "units": "mAh/mWh",
                "desc": "Estimated remaining capacity (`getBatteryRemainingCapacity()`)."
            },
            {
                "name": "percentageRemaining",
                "ctype": "uint8_t",
                "size": 1,
                "units": "%",
                "desc": "Estimated remaining capacity percentage (`calculateBatteryPercentage()`)."
            },
            {
                "name": "rssi",
                "ctype": "uint16_t",
                "size": 2,
                "units": "0-1023 or %",
                "desc": "RSSI value (`getRSSI()`)."
            }
        ],
        "deprecated": null,
        "description": "Provides detailed analog sensor readings, superseding `MSP_ANALOG` with higher precision and additional fields."
    },
    "MSP2_INAV_MISC": {
        "hex": "0x2003",
        "id": 8195,
        "mspv": 2,
        "size": 41,
        "struct": "5H4B2H2B4H3IB",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "midRc",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Mid RC value (`PWM_RANGE_MIDDLE`)."
            },
            {
                "name": "legacyMinThrottle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Always 0 (Legacy)."
            },
            {
                "name": "maxThrottle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Maximum throttle command (`getMaxThrottle()`)."
            },
            {
                "name": "minCommand",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Minimum motor command (`motorConfig()->mincommand`)."
            },
            {
                "name": "failsafeThrottle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Failsafe throttle level (`currentBatteryProfile->failsafe_throttle`)."
            },
            {
                "name": "gpsType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "GPS provider type (`gpsConfig()->provider`). 0 if `USE_GPS` disabled.",
                "enum": "?_e"
            },
            {
                "name": "legacyGpsBaud",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Always 0 (Legacy)."
            },
            {
                "name": "gpsSbasMode",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "GPS SBAS mode (`gpsConfig()->sbasMode`). 0 if `USE_GPS` disabled.",
                "enum": "?_e"
            },
            {
                "name": "rssiChannel",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Index",
                "desc": "RSSI channel index (1-based) (`rxConfig()->rssi_channel`)."
            },
            {
                "name": "magDeclination",
                "ctype": "uint16_t",
                "size": 2,
                "units": "0.1 degrees",
                "desc": "Magnetic declination / 10 (`compassConfig()->mag_declination / 10`). 0 if `USE_MAG` disabled."
            },
            {
                "name": "vbatScale",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Scale",
                "desc": "Voltage scale (`batteryMetersConfig()->voltage.scale`). 0 if `USE_ADC` disabled."
            },
            {
                "name": "vbatSource",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Voltage source (`batteryMetersConfig()->voltageSource`). 0 if `USE_ADC` disabled.",
                "enum": "?_e"
            },
            {
                "name": "cellCount",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Count",
                "desc": "Configured cell count (`currentBatteryProfile->cells`). 0 if `USE_ADC` disabled."
            },
            {
                "name": "vbatCellDetect",
                "ctype": "uint16_t",
                "size": 2,
                "units": "0.01V",
                "desc": "Cell detection voltage (`currentBatteryProfile->voltage.cellDetect`). 0 if `USE_ADC` disabled."
            },
            {
                "name": "vbatMinCell",
                "ctype": "uint16_t",
                "size": 2,
                "units": "0.01V",
                "desc": "Min cell voltage (`currentBatteryProfile->voltage.cellMin`). 0 if `USE_ADC` disabled."
            },
            {
                "name": "vbatMaxCell",
                "ctype": "uint16_t",
                "size": 2,
                "units": "0.01V",
                "desc": "Max cell voltage (`currentBatteryProfile->voltage.cellMax`). 0 if `USE_ADC` disabled."
            },
            {
                "name": "vbatWarningCell",
                "ctype": "uint16_t",
                "size": 2,
                "units": "0.01V",
                "desc": "Warning cell voltage (`currentBatteryProfile->voltage.cellWarning`). 0 if `USE_ADC` disabled."
            },
            {
                "name": "capacityValue",
                "ctype": "uint32_t",
                "size": 4,
                "units": "mAh/mWh",
                "desc": "Battery capacity (`currentBatteryProfile->capacity.value`)."
            },
            {
                "name": "capacityWarning",
                "ctype": "uint32_t",
                "size": 4,
                "units": "mAh/mWh",
                "desc": "Capacity warning threshold (`currentBatteryProfile->capacity.warning`)."
            },
            {
                "name": "capacityCritical",
                "ctype": "uint32_t",
                "size": 4,
                "units": "mAh/mWh",
                "desc": "Capacity critical threshold (`currentBatteryProfile->capacity.critical`)."
            },
            {
                "name": "capacityUnit",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Capacity unit (`batteryMetersConfig()->capacity_unit`).",
                "enum": "?_e"
            }
        ],
        "deprecated": null,
        "description": "Retrieves miscellaneous configuration settings, superseding `MSP_MISC` with higher precision and capacity fields."
    },
    "MSP2_INAV_SET_MISC": {
        "hex": "0x2004",
        "id": 8196,
        "mspv": 2,
        "size": 41,
        "struct": "5H4B2H2B4H3IB",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "midRc",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Ignored."
            },
            {
                "name": "legacyMinThrottle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "legacyMaxThrottle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "minCommand",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Sets `motorConfigMutable()->mincommand` (constrained)."
            },
            {
                "name": "failsafeThrottle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Sets `currentBatteryProfileMutable->failsafe_throttle` (constrained)."
            },
            {
                "name": "gpsType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Sets `gpsConfigMutable()->provider` (if `USE_GPS`).",
                "enum": "?_e"
            },
            {
                "name": "legacyGpsBaud",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Ignored."
            },
            {
                "name": "gpsSbasMode",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Sets `gpsConfigMutable()->sbasMode` (if `USE_GPS`).",
                "enum": "?_e"
            },
            {
                "name": "rssiChannel",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Index",
                "desc": "Sets `rxConfigMutable()->rssi_channel` (constrained). Updates source."
            },
            {
                "name": "magDeclination",
                "ctype": "uint16_t",
                "size": 2,
                "units": "0.1 degrees",
                "desc": "Sets `compassConfigMutable()->mag_declination = value * 10` (if `USE_MAG`)."
            },
            {
                "name": "vbatScale",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Scale",
                "desc": "Sets `batteryMetersConfigMutable()->voltage.scale` (if `USE_ADC`)."
            },
            {
                "name": "vbatSource",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Sets `batteryMetersConfigMutable()->voltageSource` (if `USE_ADC`, validated).",
                "enum": "?_e"
            },
            {
                "name": "cellCount",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Count",
                "desc": "Sets `currentBatteryProfileMutable->cells` (if `USE_ADC`)."
            },
            {
                "name": "vbatCellDetect",
                "ctype": "uint16_t",
                "size": 2,
                "units": "0.01V",
                "desc": "Sets `currentBatteryProfileMutable->voltage.cellDetect` (if `USE_ADC`)."
            },
            {
                "name": "vbatMinCell",
                "ctype": "uint16_t",
                "size": 2,
                "units": "0.01V",
                "desc": "Sets `currentBatteryProfileMutable->voltage.cellMin` (if `USE_ADC`)."
            },
            {
                "name": "vbatMaxCell",
                "ctype": "uint16_t",
                "size": 2,
                "units": "0.01V",
                "desc": "Sets `currentBatteryProfileMutable->voltage.cellMax` (if `USE_ADC`)."
            },
            {
                "name": "vbatWarningCell",
                "ctype": "uint16_t",
                "size": 2,
                "units": "0.01V",
                "desc": "Sets `currentBatteryProfileMutable->voltage.cellWarning` (if `USE_ADC`)."
            },
            {
                "name": "capacityValue",
                "ctype": "uint32_t",
                "size": 4,
                "units": "mAh/mWh",
                "desc": "Sets `currentBatteryProfileMutable->capacity.value`."
            },
            {
                "name": "capacityWarning",
                "ctype": "uint32_t",
                "size": 4,
                "units": "mAh/mWh",
                "desc": "Sets `currentBatteryProfileMutable->capacity.warning`."
            },
            {
                "name": "capacityCritical",
                "ctype": "uint32_t",
                "size": 4,
                "units": "mAh/mWh",
                "desc": "Sets `currentBatteryProfileMutable->capacity.critical`."
            },
            {
                "name": "capacityUnit",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Sets `batteryMetersConfigMutable()->capacity_unit` (validated). Updates OSD energy unit if changed.",
                "enum": "?_e"
            }
        ],
        "deprecated": null,
        "description": "Sets miscellaneous configuration settings, superseding `MSP_SET_MISC`."
    },
    "MSP2_INAV_BATTERY_CONFIG": {
        "hex": "0x2005",
        "id": 8197,
        "mspv": 2,
        "size": 29,
        "struct": "H2B6H3IB",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "vbatScale",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Scale",
                "desc": "Voltage scale (`batteryMetersConfig()->voltage.scale`)."
            },
            {
                "name": "vbatSource",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Voltage source (`batteryMetersConfig()->voltageSource`).",
                "enum": "?_e"
            },
            {
                "name": "cellCount",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Count",
                "desc": "Configured cell count (`currentBatteryProfile->cells`)."
            },
            {
                "name": "vbatCellDetect",
                "ctype": "uint16_t",
                "size": 2,
                "units": "0.01V",
                "desc": "Cell detection voltage (`currentBatteryProfile->voltage.cellDetect`)."
            },
            {
                "name": "vbatMinCell",
                "ctype": "uint16_t",
                "size": 2,
                "units": "0.01V",
                "desc": "Min cell voltage (`currentBatteryProfile->voltage.cellMin`)."
            },
            {
                "name": "vbatMaxCell",
                "ctype": "uint16_t",
                "size": 2,
                "units": "0.01V",
                "desc": "Max cell voltage (`currentBatteryProfile->voltage.cellMax`)."
            },
            {
                "name": "vbatWarningCell",
                "ctype": "uint16_t",
                "size": 2,
                "units": "0.01V",
                "desc": "Warning cell voltage (`currentBatteryProfile->voltage.cellWarning`)."
            },
            {
                "name": "currentOffset",
                "ctype": "uint16_t",
                "size": 2,
                "units": "mV",
                "desc": "Current sensor offset (`batteryMetersConfig()->current.offset`)."
            },
            {
                "name": "currentScale",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Scale",
                "desc": "Current sensor scale (`batteryMetersConfig()->current.scale`)."
            },
            {
                "name": "capacityValue",
                "ctype": "uint32_t",
                "size": 4,
                "units": "mAh/mWh",
                "desc": "Battery capacity (`currentBatteryProfile->capacity.value`)."
            },
            {
                "name": "capacityWarning",
                "ctype": "uint32_t",
                "size": 4,
                "units": "mAh/mWh",
                "desc": "Capacity warning threshold (`currentBatteryProfile->capacity.warning`)."
            },
            {
                "name": "capacityCritical",
                "ctype": "uint32_t",
                "size": 4,
                "units": "mAh/mWh",
                "desc": "Capacity critical threshold (`currentBatteryProfile->capacity.critical`)."
            },
            {
                "name": "capacityUnit",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Capacity unit (`batteryMetersConfig()->capacity_unit`).",
                "enum": "?_e"
            }
        ],
        "deprecated": null,
        "description": "Retrieves the configuration specific to the battery voltage and current sensors and capacity settings for the current battery profile."
    },
    "MSP2_INAV_SET_BATTERY_CONFIG": {
        "hex": "0x2006",
        "id": 8198,
        "mspv": 2,
        "size": 29,
        "struct": "H2B6H3IB",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "vbatScale",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Scale",
                "desc": "Sets `batteryMetersConfigMutable()->voltage.scale` (if `USE_ADC`)."
            },
            {
                "name": "vbatSource",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Sets `batteryMetersConfigMutable()->voltageSource` (if `USE_ADC`, validated).",
                "enum": "?_e"
            },
            {
                "name": "cellCount",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Count",
                "desc": "Sets `currentBatteryProfileMutable->cells` (if `USE_ADC`)."
            },
            {
                "name": "vbatCellDetect",
                "ctype": "uint16_t",
                "size": 2,
                "units": "0.01V",
                "desc": "Sets `currentBatteryProfileMutable->voltage.cellDetect` (if `USE_ADC`)."
            },
            {
                "name": "vbatMinCell",
                "ctype": "uint16_t",
                "size": 2,
                "units": "0.01V",
                "desc": "Sets `currentBatteryProfileMutable->voltage.cellMin` (if `USE_ADC`)."
            },
            {
                "name": "vbatMaxCell",
                "ctype": "uint16_t",
                "size": 2,
                "units": "0.01V",
                "desc": "Sets `currentBatteryProfileMutable->voltage.cellMax` (if `USE_ADC`)."
            },
            {
                "name": "vbatWarningCell",
                "ctype": "uint16_t",
                "size": 2,
                "units": "0.01V",
                "desc": "Sets `currentBatteryProfileMutable->voltage.cellWarning` (if `USE_ADC`)."
            },
            {
                "name": "currentOffset",
                "ctype": "uint16_t",
                "size": 2,
                "units": "mV",
                "desc": "Sets `batteryMetersConfigMutable()->current.offset`."
            },
            {
                "name": "currentScale",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Scale",
                "desc": "Sets `batteryMetersConfigMutable()->current.scale`."
            },
            {
                "name": "capacityValue",
                "ctype": "uint32_t",
                "size": 4,
                "units": "mAh/mWh",
                "desc": "Sets `currentBatteryProfileMutable->capacity.value`."
            },
            {
                "name": "capacityWarning",
                "ctype": "uint32_t",
                "size": 4,
                "units": "mAh/mWh",
                "desc": "Sets `currentBatteryProfileMutable->capacity.warning`."
            },
            {
                "name": "capacityCritical",
                "ctype": "uint32_t",
                "size": 4,
                "units": "mAh/mWh",
                "desc": "Sets `currentBatteryProfileMutable->capacity.critical`."
            },
            {
                "name": "capacityUnit",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Sets `batteryMetersConfigMutable()->capacity_unit` (validated). Updates OSD energy unit if changed.",
                "enum": "?_e"
            }
        ],
        "deprecated": null,
        "description": "Sets the battery voltage/current sensor configuration and capacity settings for the current battery profile."
    },
    "MSP2_INAV_RATE_PROFILE": {
        "hex": "0x2007",
        "id": 8199,
        "mspv": 2,
        "size": 15,
        "struct": "3BH10B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "throttleMid",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Throttle Midpoint (`currentControlRateProfile->throttle.rcMid8`)."
            },
            {
                "name": "throttleExpo",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Throttle Expo (`currentControlRateProfile->throttle.rcExpo8`)."
            },
            {
                "name": "dynamicThrottlePID",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "TPA value (`currentControlRateProfile->throttle.dynPID`)."
            },
            {
                "name": "tpaBreakpoint",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "TPA breakpoint (`currentControlRateProfile->throttle.pa_breakpoint`)."
            },
            {
                "name": "stabRcExpo",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Stabilized Roll/Pitch Expo (`currentControlRateProfile->stabilized.rcExpo8`)."
            },
            {
                "name": "stabRcYawExpo",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Stabilized Yaw Expo (`currentControlRateProfile->stabilized.rcYawExpo8`)."
            },
            {
                "name": "stabRollRate",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Stabilized Roll Rate (`currentControlRateProfile->stabilized.rates[FD_ROLL]`)."
            },
            {
                "name": "stabPitchRate",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Stabilized Pitch Rate (`currentControlRateProfile->stabilized.rates[FD_PITCH]`)."
            },
            {
                "name": "stabYawRate",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Stabilized Yaw Rate (`currentControlRateProfile->stabilized.rates[FD_YAW]`)."
            },
            {
                "name": "manualRcExpo",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Manual Roll/Pitch Expo (`currentControlRateProfile->manual.rcExpo8`)."
            },
            {
                "name": "manualRcYawExpo",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Manual Yaw Expo (`currentControlRateProfile->manual.rcYawExpo8`)."
            },
            {
                "name": "manualRollRate",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Manual Roll Rate (`currentControlRateProfile->manual.rates[FD_ROLL]`)."
            },
            {
                "name": "manualPitchRate",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Manual Pitch Rate (`currentControlRateProfile->manual.rates[FD_PITCH]`)."
            },
            {
                "name": "manualYawRate",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Manual Yaw Rate (`currentControlRateProfile->manual.rates[FD_YAW]`)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the rates and expos for the current control rate profile, including both stabilized and manual flight modes. Supersedes `MSP_RC_TUNING`."
    },
    "MSP2_INAV_SET_RATE_PROFILE": {
        "hex": "0x2008",
        "id": 8200,
        "mspv": 2,
        "size": 15,
        "struct": "3BH10B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "throttleMid",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `currentControlRateProfile_p->throttle.rcMid8`."
            },
            {
                "name": "throttleExpo",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `currentControlRateProfile_p->throttle.rcExpo8`."
            },
            {
                "name": "dynamicThrottlePID",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `currentControlRateProfile_p->throttle.dynPID`."
            },
            {
                "name": "tpaBreakpoint",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Sets `currentControlRateProfile_p->throttle.pa_breakpoint`."
            },
            {
                "name": "stabRcExpo",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `currentControlRateProfile_p->stabilized.rcExpo8`."
            },
            {
                "name": "stabRcYawExpo",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `currentControlRateProfile_p->stabilized.rcYawExpo8`."
            },
            {
                "name": "stabRollRate",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `currentControlRateProfile_p->stabilized.rates[FD_ROLL]` (constrained)."
            },
            {
                "name": "stabPitchRate",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `currentControlRateProfile_p->stabilized.rates[FD_PITCH]` (constrained)."
            },
            {
                "name": "stabYawRate",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `currentControlRateProfile_p->stabilized.rates[FD_YAW]` (constrained)."
            },
            {
                "name": "manualRcExpo",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `currentControlRateProfile_p->manual.rcExpo8`."
            },
            {
                "name": "manualRcYawExpo",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `currentControlRateProfile_p->manual.rcYawExpo8`."
            },
            {
                "name": "manualRollRate",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `currentControlRateProfile_p->manual.rates[FD_ROLL]` (constrained)."
            },
            {
                "name": "manualPitchRate",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `currentControlRateProfile_p->manual.rates[FD_PITCH]` (constrained)."
            },
            {
                "name": "manualYawRate",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `currentControlRateProfile_p->manual.rates[FD_YAW]` (constrained)."
            }
        ],
        "deprecated": null,
        "description": "Sets the rates and expos for the current control rate profile (stabilized and manual). Supersedes `MSP_SET_RC_TUNING`."
    },
    "MSP2_INAV_AIR_SPEED": {
        "hex": "0x2009",
        "id": 8201,
        "mspv": 2,
        "size": 4,
        "struct": "I",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "airspeed",
                "ctype": "uint32_t",
                "size": 4,
                "units": "cm/s",
                "desc": "Estimated/measured airspeed (`getAirspeedEstimate()`). 0 if `USE_PITOT` disabled or no valid data."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the estimated or measured airspeed."
    },
    "MSP2_INAV_OUTPUT_MAPPING": {
        "hex": "0x200a",
        "id": 8202,
        "mspv": 2,
        "size": 1,
        "struct": "B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "usageFlags",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Timer usage flags (truncated). `TIM_USE_MOTOR` or `TIM_USE_SERVO`."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the output mapping configuration (identifies which timer outputs are used for Motors/Servos). Legacy version sending only 8-bit usage flags."
    },
    "MSP2_INAV_MC_BRAKING": {
        "hex": "0x200b",
        "id": 8203,
        "mspv": 2,
        "size": 14,
        "struct": "3HB3HB",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "brakingSpeedThreshold",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Speed above which braking engages (`navConfig()->mc.braking_speed_threshold`)."
            },
            {
                "name": "brakingDisengageSpeed",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Speed below which braking disengages (`navConfig()->mc.braking_disengage_speed`)."
            },
            {
                "name": "brakingTimeout",
                "ctype": "uint16_t",
                "size": 2,
                "units": "ms",
                "desc": "Timeout before braking force reduces (`navConfig()->mc.braking_timeout`)."
            },
            {
                "name": "brakingBoostFactor",
                "ctype": "uint8_t",
                "size": 1,
                "units": "%",
                "desc": "Boost factor applied during braking (`navConfig()->mc.braking_boost_factor`)."
            },
            {
                "name": "brakingBoostTimeout",
                "ctype": "uint16_t",
                "size": 2,
                "units": "ms",
                "desc": "Timeout for the boost factor (`navConfig()->mc.braking_boost_timeout`)."
            },
            {
                "name": "brakingBoostSpeedThreshold",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Speed threshold for boost engagement (`navConfig()->mc.braking_boost_speed_threshold`)."
            },
            {
                "name": "brakingBoostDisengageSpeed",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Speed threshold for boost disengagement (`navConfig()->mc.braking_boost_disengage_speed`)."
            },
            {
                "name": "brakingBankAngle",
                "ctype": "uint8_t",
                "size": 1,
                "units": "degrees",
                "desc": "Maximum bank angle allowed during braking (`navConfig()->mc.braking_bank_angle`)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves configuration parameters for the multirotor braking mode feature."
    },
    "MSP2_INAV_SET_MC_BRAKING": {
        "hex": "0x200c",
        "id": 8204,
        "mspv": 2,
        "size": 14,
        "struct": "3HB3HB",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "brakingSpeedThreshold",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Sets `navConfigMutable()->mc.braking_speed_threshold`."
            },
            {
                "name": "brakingDisengageSpeed",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Sets `navConfigMutable()->mc.braking_disengage_speed`."
            },
            {
                "name": "brakingTimeout",
                "ctype": "uint16_t",
                "size": 2,
                "units": "ms",
                "desc": "Sets `navConfigMutable()->mc.braking_timeout`."
            },
            {
                "name": "brakingBoostFactor",
                "ctype": "uint8_t",
                "size": 1,
                "units": "%",
                "desc": "Sets `navConfigMutable()->mc.braking_boost_factor`."
            },
            {
                "name": "brakingBoostTimeout",
                "ctype": "uint16_t",
                "size": 2,
                "units": "ms",
                "desc": "Sets `navConfigMutable()->mc.braking_boost_timeout`."
            },
            {
                "name": "brakingBoostSpeedThreshold",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Sets `navConfigMutable()->mc.braking_boost_speed_threshold`."
            },
            {
                "name": "brakingBoostDisengageSpeed",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Sets `navConfigMutable()->mc.braking_boost_disengage_speed`."
            },
            {
                "name": "brakingBankAngle",
                "ctype": "uint8_t",
                "size": 1,
                "units": "degrees",
                "desc": "Sets `navConfigMutable()->mc.braking_bank_angle`."
            }
        ],
        "deprecated": null,
        "description": "Sets configuration parameters for the multirotor braking mode feature."
    },
    "MSP2_INAV_OUTPUT_MAPPING_EXT": {
        "hex": "0x200d",
        "id": 8205,
        "mspv": 2,
        "size": 2,
        "struct": "2B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "timerId",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Hardware timer identifier (e.g., `TIM1`, `TIM2`). Value depends on target."
            },
            {
                "name": "usageFlags",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Timer usage flags (truncated). `TIM_USE_MOTOR` or `TIM_USE_SERVO`."
            }
        ],
        "deprecated": null,
        "description": "Retrieves extended output mapping configuration (timer ID and usage flags). Obsolete, use `MSP2_INAV_OUTPUT_MAPPING_EXT2`."
    },
    "MSP2_INAV_TIMER_OUTPUT_MODE": {
        "hex": "0x200e",
        "id": 8206,
        "mspv": 2,
        "size": 2,
        "struct": "2B",
        "direction": 2,
        "variable_len": false,
        "payload": [
            {
                "name": "timerIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Timer index."
            },
            {
                "name": "outputMode",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Output mode override (`TIMER_OUTPUT_MODE_*` enum).",
                "enum": "TIMER_OUTPUT_MODE_*"
            }
        ],
        "deprecated": null,
        "description": "Get or list the output mode override for hardware timers (e.g., force ONESHOT, DSHOT)."
    },
    "MSP2_INAV_SET_TIMER_OUTPUT_MODE": {
        "hex": "0x200f",
        "id": 8207,
        "mspv": 2,
        "size": 2,
        "struct": "2B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "timerIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Index of the hardware timer definition."
            },
            {
                "name": "outputMode",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Output mode override (`TIMER_OUTPUT_MODE_*` enum) to set.",
                "enum": "TIMER_OUTPUT_MODE_*"
            }
        ],
        "deprecated": null,
        "description": "Set the output mode override for a specific hardware timer."
    },
    "MSP2_INAV_OUTPUT_MAPPING_EXT2": {
        "hex": "0x210d",
        "id": 8461,
        "mspv": 2,
        "size": 6,
        "struct": "BIB",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "timerId",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Hardware timer identifier (e.g., `TIM1`, `TIM2`). SITL uses index."
            },
            {
                "name": "usageFlags",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Full 32-bit timer usage flags (`TIM_USE_*`)."
            },
            {
                "name": "pinLabel",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Label for special pin usage (`PIN_LABEL_*` enum, e.g., `PIN_LABEL_LED`). 0 (`PIN_LABEL_NONE`) otherwise.",
                "enum": "PIN_LABEL_*"
            }
        ],
        "deprecated": null,
        "description": "Retrieves the full extended output mapping configuration (timer ID, full 32-bit usage flags, and pin label). Supersedes `MSP2_INAV_OUTPUT_MAPPING_EXT`."
    },
    "MSP2_INAV_MIXER": {
        "hex": "0x2010",
        "id": 8208,
        "mspv": 2,
        "size": 9,
        "struct": "5BH2B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "motorDirectionInverted",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Boolean: 1 if motor direction is reversed globally (`mixerConfig()->motorDirectionInverted`)."
            },
            {
                "name": "reserved1",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Always 0 (Was yaw jump prevention limit)."
            },
            {
                "name": "motorStopOnLow",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Boolean: 1 if motors stop at minimum throttle (`mixerConfig()->motorstopOnLow`)."
            },
            {
                "name": "platformType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`platformType_e`): Vehicle platform type (Multirotor, Airplane, etc.) (`mixerConfig()->platformType`).",
                "enum": "platformType_e"
            },
            {
                "name": "hasFlaps",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Boolean: 1 if the current mixer configuration includes flaps (`mixerConfig()->hasFlaps`)."
            },
            {
                "name": "appliedMixerPreset",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Enum (`mixerPreset_e`): Mixer preset currently applied (`mixerConfig()->appliedMixerPreset`).",
                "enum": "mixerPreset_e"
            },
            {
                "name": "maxMotors",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Constant: Maximum motors supported (`MAX_SUPPORTED_MOTORS`)."
            },
            {
                "name": "maxServos",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Constant: Maximum servos supported (`MAX_SUPPORTED_SERVOS`)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves INAV-specific mixer configuration details."
    },
    "MSP2_INAV_SET_MIXER": {
        "hex": "0x2011",
        "id": 8209,
        "mspv": 2,
        "size": 9,
        "struct": "5BH2B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "motorDirectionInverted",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `mixerConfigMutable()->motorDirectionInverted`."
            },
            {
                "name": "reserved1",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Ignored."
            },
            {
                "name": "motorStopOnLow",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `mixerConfigMutable()->motorstopOnLow`."
            },
            {
                "name": "platformType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `mixerConfigMutable()->platformType`."
            },
            {
                "name": "hasFlaps",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `mixerConfigMutable()->hasFlaps`."
            },
            {
                "name": "appliedMixerPreset",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Sets `mixerConfigMutable()->appliedMixerPreset`."
            },
            {
                "name": "maxMotors",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Ignored."
            },
            {
                "name": "maxServos",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Ignored."
            }
        ],
        "deprecated": null,
        "description": "Sets INAV-specific mixer configuration details."
    },
    "MSP2_INAV_OSD_LAYOUTS": {
        "hex": "0x2012",
        "id": 8210,
        "mspv": 2,
        "size": 2,
        "struct": "2B",
        "direction": 2,
        "variable_len": false,
        "payload": [
            {
                "name": "layoutCount",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Number of OSD layouts (`OSD_LAYOUT_COUNT`)."
            },
            {
                "name": "itemCount",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Number of OSD items per layout (`OSD_ITEM_COUNT`)."
            }
        ],
        "deprecated": null,
        "description": "Gets OSD layout information (counts, positions for a specific layout, or position for a specific item)."
    },
    "MSP2_INAV_OSD_SET_LAYOUT_ITEM": {
        "hex": "0x2013",
        "id": 8211,
        "mspv": 2,
        "size": 4,
        "struct": "2BH",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "layoutIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Index",
                "desc": "Index of the OSD layout (0 to `OSD_LAYOUT_COUNT - 1`)."
            },
            {
                "name": "itemIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Index",
                "desc": "Index of the OSD item (`OSD_ITEM_*` enum).",
                "enum": "OSD_ITEM_*"
            },
            {
                "name": "itemPosition",
                "ctype": "uint16_t",
                "size": 2,
                "units": "Coordinates",
                "desc": "Packed X/Y position (`(Y << 8)"
            }
        ],
        "deprecated": null,
        "description": "Sets the position of a single OSD item within a specific layout."
    },
    "MSP2_INAV_OSD_ALARMS": {
        "hex": "0x2014",
        "id": 8212,
        "mspv": 2,
        "size": 28,
        "struct": "B5H2hB6H",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "rssiAlarm",
                "ctype": "uint8_t",
                "size": 1,
                "units": "%",
                "desc": "RSSI alarm threshold (`osdConfig()->rssi_alarm`)."
            },
            {
                "name": "timerAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "seconds",
                "desc": "Timer alarm threshold (`osdConfig()->time_alarm`)."
            },
            {
                "name": "altAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "Altitude alarm threshold (`osdConfig()->alt_alarm`)."
            },
            {
                "name": "distAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "Distance alarm threshold (`osdConfig()->dist_alarm`)."
            },
            {
                "name": "negAltAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "Negative altitude alarm threshold (`osdConfig()->neg_alt_alarm`)."
            },
            {
                "name": "gForceAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "G * 1000",
                "desc": "G-force alarm threshold (`osdConfig()->gforce_alarm * 1000`)."
            },
            {
                "name": "gForceAxisMinAlarm",
                "ctype": "int16_t",
                "size": 2,
                "units": "G * 1000",
                "desc": "Min G-force per-axis alarm (`osdConfig()->gforce_axis_alarm_min * 1000`)."
            },
            {
                "name": "gForceAxisMaxAlarm",
                "ctype": "int16_t",
                "size": 2,
                "units": "G * 1000",
                "desc": "Max G-force per-axis alarm (`osdConfig()->gforce_axis_alarm_max * 1000`)."
            },
            {
                "name": "currentAlarm",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0.1 A ?",
                "desc": "Current draw alarm threshold (`osdConfig()->current_alarm`). Units may need verification."
            },
            {
                "name": "imuTempMinAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "degrees C",
                "desc": "Min IMU temperature alarm (`osdConfig()->imu_temp_alarm_min`)."
            },
            {
                "name": "imuTempMaxAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "degrees C",
                "desc": "Max IMU temperature alarm (`osdConfig()->imu_temp_alarm_max`)."
            },
            {
                "name": "baroTempMinAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "degrees C",
                "desc": "Min Baro temperature alarm (`osdConfig()->baro_temp_alarm_min`). 0 if `USE_BARO` disabled."
            },
            {
                "name": "baroTempMaxAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "degrees C",
                "desc": "Max Baro temperature alarm (`osdConfig()->baro_temp_alarm_max`). 0 if `USE_BARO` disabled."
            },
            {
                "name": "adsbWarnDistance",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "ADSB warning distance (`osdConfig()->adsb_distance_warning`). 0 if `USE_ADSB` disabled."
            },
            {
                "name": "adsbAlertDistance",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "ADSB alert distance (`osdConfig()->adsb_distance_alert`). 0 if `USE_ADSB` disabled."
            }
        ],
        "deprecated": null,
        "description": "Retrieves OSD alarm threshold settings."
    },
    "MSP2_INAV_OSD_SET_ALARMS": {
        "hex": "0x2015",
        "id": 8213,
        "mspv": 2,
        "size": 24,
        "struct": "B5H2hB4H",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "rssiAlarm",
                "ctype": "uint8_t",
                "size": 1,
                "units": "%",
                "desc": "Sets `osdConfigMutable()->rssi_alarm`."
            },
            {
                "name": "timerAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "seconds",
                "desc": "Sets `osdConfigMutable()->time_alarm`."
            },
            {
                "name": "altAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "Sets `osdConfigMutable()->alt_alarm`."
            },
            {
                "name": "distAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "Sets `osdConfigMutable()->dist_alarm`."
            },
            {
                "name": "negAltAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "meters",
                "desc": "Sets `osdConfigMutable()->neg_alt_alarm`."
            },
            {
                "name": "gForceAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "G * 1000",
                "desc": "Sets `osdConfigMutable()->gforce_alarm = value / 1000.0f`."
            },
            {
                "name": "gForceAxisMinAlarm",
                "ctype": "int16_t",
                "size": 2,
                "units": "G * 1000",
                "desc": "Sets `osdConfigMutable()->gforce_axis_alarm_min = value / 1000.0f`."
            },
            {
                "name": "gForceAxisMaxAlarm",
                "ctype": "int16_t",
                "size": 2,
                "units": "G * 1000",
                "desc": "Sets `osdConfigMutable()->gforce_axis_alarm_max = value / 1000.0f`."
            },
            {
                "name": "currentAlarm",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0.1 A ?",
                "desc": "Sets `osdConfigMutable()->current_alarm`."
            },
            {
                "name": "imuTempMinAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "degrees C",
                "desc": "Sets `osdConfigMutable()->imu_temp_alarm_min`."
            },
            {
                "name": "imuTempMaxAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "degrees C",
                "desc": "Sets `osdConfigMutable()->imu_temp_alarm_max`."
            },
            {
                "name": "baroTempMinAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "degrees C",
                "desc": "Sets `osdConfigMutable()->baro_temp_alarm_min` (if `USE_BARO`)."
            },
            {
                "name": "baroTempMaxAlarm",
                "ctype": "uint16_t",
                "size": 2,
                "units": "degrees C",
                "desc": "Sets `osdConfigMutable()->baro_temp_alarm_max` (if `USE_BARO`)."
            }
        ],
        "deprecated": null,
        "description": "Sets OSD alarm threshold settings."
    },
    "MSP2_INAV_OSD_PREFERENCES": {
        "hex": "0x2016",
        "id": 8214,
        "mspv": 2,
        "size": 9,
        "struct": "9B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "videoSystem",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum: Video system (Auto/PAL/NTSC) (`osdConfig()->video_system`).",
                "enum": "osdConfig()->video_system"
            },
            {
                "name": "mainVoltageDecimals",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Count: Decimal places for main voltage display (`osdConfig()->main_voltage_decimals`)."
            },
            {
                "name": "ahiReverseRoll",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Boolean: Reverse roll direction on Artificial Horizon (`osdConfig()->ahi_reverse_roll`)."
            },
            {
                "name": "crosshairsStyle",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum: Style of the center crosshairs (`osdConfig()->crosshairs_style`).",
                "enum": "osdConfig()->crosshairs_style"
            },
            {
                "name": "leftSidebarScroll",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Boolean: Enable scrolling for left sidebar (`osdConfig()->left_sidebar_scroll`)."
            },
            {
                "name": "rightSidebarScroll",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Boolean: Enable scrolling for right sidebar (`osdConfig()->right_sidebar_scroll`)."
            },
            {
                "name": "sidebarScrollArrows",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Boolean: Show arrows for scrollable sidebars (`osdConfig()->sidebar_scroll_arrows`)."
            },
            {
                "name": "units",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum: Measurement units (Metric/Imperial) (`osdConfig()->units`).",
                "enum": "osdConfig()->units"
            },
            {
                "name": "statsEnergyUnit",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum: Unit for energy display in post-flight stats (`osdConfig()->stats_energy_unit`).",
                "enum": "osdConfig()->stats_energy_unit"
            }
        ],
        "deprecated": null,
        "description": "Retrieves OSD display preferences (video system, units, styles, etc.)."
    },
    "MSP2_INAV_OSD_SET_PREFERENCES": {
        "hex": "0x2017",
        "id": 8215,
        "mspv": 2,
        "size": 9,
        "struct": "9B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "videoSystem",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `osdConfigMutable()->video_system`."
            },
            {
                "name": "mainVoltageDecimals",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `osdConfigMutable()->main_voltage_decimals`."
            },
            {
                "name": "ahiReverseRoll",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `osdConfigMutable()->ahi_reverse_roll`."
            },
            {
                "name": "crosshairsStyle",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `osdConfigMutable()->crosshairs_style`."
            },
            {
                "name": "leftSidebarScroll",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `osdConfigMutable()->left_sidebar_scroll`."
            },
            {
                "name": "rightSidebarScroll",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `osdConfigMutable()->right_sidebar_scroll`."
            },
            {
                "name": "sidebarScrollArrows",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `osdConfigMutable()->sidebar_scroll_arrows`."
            },
            {
                "name": "units",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `osdConfigMutable()->units`."
            },
            {
                "name": "statsEnergyUnit",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `osdConfigMutable()->stats_energy_unit`."
            }
        ],
        "deprecated": null,
        "description": "Sets OSD display preferences."
    },
    "MSP2_INAV_SELECT_BATTERY_PROFILE": {
        "hex": "0x2018",
        "id": 8216,
        "mspv": 2,
        "size": 1,
        "struct": "B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "batteryProfileIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Index of the battery profile to activate (0-based)."
            }
        ],
        "deprecated": null,
        "description": "Selects the active battery profile and saves configuration."
    },
    "MSP2_INAV_DEBUG": {
        "hex": "0x2019",
        "id": 8217,
        "mspv": 2,
        "size": null,
        "struct": null,
        "direction": 1,
        "variable_len": true,
        "payload": [
            {
                "name": "debugValues",
                "ctype": "uint32_t[DEBUG32_VALUE_COUNT]",
                "size": null,
                "units": "",
                "desc": "Values from the `debug` array (typically 8 values)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves values from the firmware's 32-bit `debug[]` array. Supersedes `MSP_DEBUG`."
    },
    "MSP2_BLACKBOX_CONFIG": {
        "hex": "0x201a",
        "id": 8218,
        "mspv": 2,
        "size": 10,
        "struct": "2B2HI",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "blackboxSupported",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Boolean: 1 if Blackbox is supported (`USE_BLACKBOX`), 0 otherwise."
            },
            {
                "name": "blackboxDevice",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`blackboxDevice_e`): Target device for logging (`blackboxConfig()->device`). 0 if not supported.",
                "enum": "blackboxDevice_e"
            },
            {
                "name": "blackboxRateNum",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Numerator for logging rate divider (`blackboxConfig()->rate_num`). 0 if not supported."
            },
            {
                "name": "blackboxRateDenom",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Denominator for logging rate divider (`blackboxConfig()->rate_denom`). 0 if not supported."
            },
            {
                "name": "blackboxIncludeFlags",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Bitmask: Flags for fields included/excluded from logging (`blackboxConfig()->includeFlags`)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the Blackbox configuration. Supersedes `MSP_BLACKBOX_CONFIG`."
    },
    "MSP2_SET_BLACKBOX_CONFIG": {
        "hex": "0x201b",
        "id": 8219,
        "mspv": 2,
        "size": 9,
        "struct": "B2HI",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "blackboxDevice",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets `blackboxConfigMutable()->device`."
            },
            {
                "name": "blackboxRateNum",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Sets `blackboxConfigMutable()->rate_num`."
            },
            {
                "name": "blackboxRateDenom",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Sets `blackboxConfigMutable()->rate_denom`."
            },
            {
                "name": "blackboxIncludeFlags",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Sets `blackboxConfigMutable()->includeFlags`."
            }
        ],
        "deprecated": null,
        "description": "Sets the Blackbox configuration. Supersedes `MSP_SET_BLACKBOX_CONFIG`."
    },
    "MSP2_INAV_TEMP_SENSOR_CONFIG": {
        "hex": "0x201c",
        "id": 8220,
        "mspv": 2,
        "size": null,
        "struct": null,
        "direction": 1,
        "variable_len": true,
        "payload": [
            {
                "name": "type",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`tempSensorType_e`): Type of the temperature sensor.",
                "enum": "tempSensorType_e"
            },
            {
                "name": "address",
                "ctype": "uint64_t",
                "size": 8,
                "units": "",
                "desc": "Sensor address/ID (e.g., for 1-Wire sensors)."
            },
            {
                "name": "alarmMin",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Min temperature alarm threshold (degrees C)."
            },
            {
                "name": "alarmMax",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Max temperature alarm threshold (degrees C)."
            },
            {
                "name": "osdSymbol",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Index: OSD symbol to use for this sensor (0 to `TEMP_SENSOR_SYM_COUNT`)."
            },
            {
                "name": "label",
                "ctype": "char[TEMPERATURE_LABEL_LEN]",
                "size": null,
                "units": "",
                "desc": "User-defined label for the sensor."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the configuration for all onboard temperature sensors."
    },
    "MSP2_INAV_SET_TEMP_SENSOR_CONFIG": {
        "hex": "0x201d",
        "id": 8221,
        "mspv": 2,
        "size": null,
        "struct": null,
        "direction": 0,
        "variable_len": true,
        "payload": [
            {
                "name": "type",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets sensor type."
            },
            {
                "name": "address",
                "ctype": "uint64_t",
                "size": 8,
                "units": "",
                "desc": "Sets sensor address/ID."
            },
            {
                "name": "alarmMin",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Sets min alarm threshold."
            },
            {
                "name": "alarmMax",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Sets max alarm threshold."
            },
            {
                "name": "osdSymbol",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets OSD symbol index (validated)."
            },
            {
                "name": "label",
                "ctype": "char[TEMPERATURE_LABEL_LEN]",
                "size": null,
                "units": "",
                "desc": "Sets sensor label (converted to uppercase)."
            }
        ],
        "deprecated": null,
        "description": "Sets the configuration for all onboard temperature sensors."
    },
    "MSP2_INAV_TEMPERATURES": {
        "hex": "0x201e",
        "id": 8222,
        "mspv": 2,
        "size": 2,
        "struct": "h",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "temperature",
                "ctype": "int16_t",
                "size": 2,
                "units": "degrees C",
                "desc": "Current temperature reading. -1000 if sensor is invalid or reading failed."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the current readings from all configured temperature sensors."
    },
    "MSP_SIMULATOR": {
        "hex": "0x201f",
        "id": 8223,
        "mspv": 2,
        "size": null,
        "struct": null,
        "direction": 2,
        "variable_len": true,
        "payload": [
            {
                "name": "stabilizedRoll",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Stabilized Roll command output (-500 to 500)."
            },
            {
                "name": "stabilizedPitch",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Stabilized Pitch command output (-500 to 500)."
            },
            {
                "name": "stabilizedYaw",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Stabilized Yaw command output (-500 to 500)."
            },
            {
                "name": "stabilizedThrottle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Stabilized Throttle command output (-500 to 500 if armed, else -500)."
            },
            {
                "name": "debugFlags",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Packed flags: Debug index (0-7), Platform type, Armed state, OSD feature status."
            },
            {
                "name": "debugValue",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Current debug value (`debug[simulatorData.debugIndex]`)."
            },
            {
                "name": "attitudeRoll",
                "ctype": "int16_t",
                "size": 2,
                "units": "",
                "desc": "Current estimated Roll (deci-deg)."
            },
            {
                "name": "attitudePitch",
                "ctype": "int16_t",
                "size": 2,
                "units": "",
                "desc": "Current estimated Pitch (deci-deg)."
            },
            {
                "name": "attitudeYaw",
                "ctype": "int16_t",
                "size": 2,
                "units": "",
                "desc": "Current estimated Yaw (deci-deg)."
            },
            {
                "name": "osdHeader",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "OSD RLE Header (255)."
            },
            {
                "name": "osdRows",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "(If OSD supported) Number of OSD rows."
            },
            {
                "name": "osdCols",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "(If OSD supported) Number of OSD columns."
            },
            {
                "name": "osdStartY",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "(If OSD supported) Starting row for RLE data."
            },
            {
                "name": "osdStartX",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "(If OSD supported) Starting column for RLE data."
            },
            {
                "name": "osdRleData",
                "ctype": "uint8_t[]",
                "size": null,
                "units": "",
                "desc": "(If OSD supported) Run-length encoded OSD character data. Terminated by `[0, 0]`."
            }
        ],
        "deprecated": null,
        "description": "Handles Hardware-in-the-Loop (HITL) simulation data exchange. Receives simulated sensor data and options, sends back control outputs and debug info."
    },
    "MSP2_INAV_SERVO_MIXER": {
        "hex": "0x2020",
        "id": 8224,
        "mspv": 2,
        "size": 6,
        "struct": "2BH2B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "targetChannel",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Servo output channel index (0-based)."
            },
            {
                "name": "inputSource",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum: Input source (`mixerSource_t`).",
                "enum": "mixerSource_t"
            },
            {
                "name": "rate",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Mixing rate/weight."
            },
            {
                "name": "speed",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Speed/Slew rate limit (0-100)."
            },
            {
                "name": "conditionId",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Logic Condition ID (0 to `MAX_LOGIC_CONDITIONS - 1`, or 255/-1 if none/disabled)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the custom servo mixer rules, including programming framework condition IDs, for primary and secondary mixer profiles. Supersedes `MSP_SERVO_MIX_RULES`."
    },
    "MSP2_INAV_SET_SERVO_MIXER": {
        "hex": "0x2021",
        "id": 8225,
        "mspv": 2,
        "size": 7,
        "struct": "3BH2B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "ruleIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Index of the rule to set (0 to `MAX_SERVO_RULES - 1`)."
            },
            {
                "name": "targetChannel",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Servo output channel index."
            },
            {
                "name": "inputSource",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum: Input source (`mixerSource_t`).",
                "enum": "mixerSource_t"
            },
            {
                "name": "rate",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Mixing rate/weight."
            },
            {
                "name": "speed",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Speed/Slew rate limit (0-100)."
            },
            {
                "name": "conditionId",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Logic Condition ID (255/-1 if none). Ignored if `USE_PROGRAMMING_FRAMEWORK` is disabled."
            }
        ],
        "deprecated": null,
        "description": "Sets a single custom servo mixer rule, including programming framework condition ID. Supersedes `MSP_SET_SERVO_MIX_RULE`."
    },
    "MSP2_INAV_LOGIC_CONDITIONS": {
        "hex": "0x2022",
        "id": 8226,
        "mspv": 2,
        "size": 14,
        "struct": "4BIBIB",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "enabled",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Boolean: 1 if the condition is enabled."
            },
            {
                "name": "activatorId",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "ID of the activator condition (if any, 255 if none)."
            },
            {
                "name": "operation",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`logicConditionOp_e`): Logical operation (AND, OR, XOR, etc.).",
                "enum": "logicConditionOp_e"
            },
            {
                "name": "operandAType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`logicOperandType_e`): Type of the first operand (Flight Mode, GVAR, etc.).",
                "enum": "logicOperandType_e"
            },
            {
                "name": "operandAValue",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Value/ID of the first operand."
            },
            {
                "name": "operandBType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`logicOperandType_e`): Type of the second operand.",
                "enum": "logicOperandType_e"
            },
            {
                "name": "operandBValue",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Value/ID of the second operand."
            },
            {
                "name": "flags",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Bitmask: Condition flags (e.g., `LC_FLAG_FIRST_TIME_TRUE`)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the configuration of all defined Logic Conditions."
    },
    "MSP2_INAV_SET_LOGIC_CONDITIONS": {
        "hex": "0x2023",
        "id": 8227,
        "mspv": 2,
        "size": 15,
        "struct": "5BIBIB",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "conditionIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Index of the condition to set (0 to `MAX_LOGIC_CONDITIONS - 1`)."
            },
            {
                "name": "enabled",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Boolean: 1 to enable the condition."
            },
            {
                "name": "activatorId",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Activator condition ID."
            },
            {
                "name": "operation",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum: Logical operation."
            },
            {
                "name": "operandAType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum: Type of operand A."
            },
            {
                "name": "operandAValue",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Value/ID of operand A."
            },
            {
                "name": "operandBType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum: Type of operand B."
            },
            {
                "name": "operandBValue",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Value/ID of operand B."
            },
            {
                "name": "flags",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Bitmask: Condition flags."
            }
        ],
        "deprecated": null,
        "description": "Sets the configuration for a single Logic Condition by its index."
    },
    "MSP2_INAV_GLOBAL_FUNCTIONS": {
        "implemented": false
    },
    "MSP2_INAV_SET_GLOBAL_FUNCTIONS": {
        "implemented": false
    },
    "MSP2_INAV_LOGIC_CONDITIONS_STATUS": {
        "hex": "0x2026",
        "id": 8230,
        "mspv": 2,
        "size": null,
        "struct": null,
        "direction": 1,
        "variable_len": true,
        "payload": [
            {
                "name": "conditionValues",
                "ctype": "uint32_t[MAX_LOGIC_CONDITIONS]",
                "size": null,
                "units": "",
                "desc": "Array of current values for each logic condition (`logicConditionGetValue(i)`). 1 for true, 0 for false, or numerical value depending on operation."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the current evaluated status (true/false or numerical value) of all logic conditions."
    },
    "MSP2_INAV_GVAR_STATUS": {
        "hex": "0x2027",
        "id": 8231,
        "mspv": 2,
        "size": null,
        "struct": null,
        "direction": 1,
        "variable_len": true,
        "payload": [
            {
                "name": "gvarValues",
                "ctype": "uint32_t[MAX_GLOBAL_VARIABLES]",
                "size": null,
                "units": "",
                "desc": "Array of current values for each global variable (`gvGet(i)`)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the current values of all Global Variables (GVARS)."
    },
    "MSP2_INAV_PROGRAMMING_PID": {
        "hex": "0x2028",
        "id": 8232,
        "mspv": 2,
        "size": 19,
        "struct": "2BIBI4H",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "enabled",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Boolean: 1 if the PID is enabled."
            },
            {
                "name": "setpointType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`logicOperandType_e`): Type of the setpoint source.",
                "enum": "logicOperandType_e"
            },
            {
                "name": "setpointValue",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Value/ID of the setpoint source."
            },
            {
                "name": "measurementType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`logicOperandType_e`): Type of the measurement source.",
                "enum": "logicOperandType_e"
            },
            {
                "name": "measurementValue",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Value/ID of the measurement source."
            },
            {
                "name": "gainP",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Proportional gain."
            },
            {
                "name": "gainI",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Integral gain."
            },
            {
                "name": "gainD",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Derivative gain."
            },
            {
                "name": "gainFF",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Feed-forward gain."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the configuration of all Programming PIDs."
    },
    "MSP2_INAV_SET_PROGRAMMING_PID": {
        "hex": "0x2029",
        "id": 8233,
        "mspv": 2,
        "size": 20,
        "struct": "3BIBI4H",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "pidIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Index of the Programming PID to set (0 to `MAX_PROGRAMMING_PID_COUNT - 1`)."
            },
            {
                "name": "enabled",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Boolean: 1 to enable the PID."
            },
            {
                "name": "setpointType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum: Type of the setpoint source."
            },
            {
                "name": "setpointValue",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Value/ID of the setpoint source."
            },
            {
                "name": "measurementType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum: Type of the measurement source."
            },
            {
                "name": "measurementValue",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Value/ID of the measurement source."
            },
            {
                "name": "gainP",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Proportional gain."
            },
            {
                "name": "gainI",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Integral gain."
            },
            {
                "name": "gainD",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Derivative gain."
            },
            {
                "name": "gainFF",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Feed-forward gain."
            }
        ],
        "deprecated": null,
        "description": "Sets the configuration for a single Programming PID by its index."
    },
    "MSP2_INAV_PROGRAMMING_PID_STATUS": {
        "hex": "0x202a",
        "id": 8234,
        "mspv": 2,
        "size": null,
        "struct": null,
        "direction": 1,
        "variable_len": true,
        "payload": [
            {
                "name": "pidOutputs",
                "ctype": "uint32_t[MAX_PROGRAMMING_PID_COUNT]",
                "size": null,
                "units": "",
                "desc": "Array of current output values for each Programming PID (`programmingPidGetOutput(i)`)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the current output value of all Programming PIDs."
    },
    "MSP2_PID": {
        "hex": "0x2030",
        "id": 8240,
        "mspv": 2,
        "size": 4,
        "struct": "4B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "P",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Proportional gain (`pidBank()->pid[i].P`), constrained 0-255."
            },
            {
                "name": "I",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Integral gain (`pidBank()->pid[i].I`), constrained 0-255."
            },
            {
                "name": "D",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Derivative gain (`pidBank()->pid[i].D`), constrained 0-255."
            },
            {
                "name": "FF",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Feed-forward gain (`pidBank()->pid[i].FF`), constrained 0-255."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the standard PID controller gains (P, I, D, FF) for the current PID profile."
    },
    "MSP2_SET_PID": {
        "hex": "0x2031",
        "id": 8241,
        "mspv": 2,
        "size": 4,
        "struct": "4B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "P",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets Proportional gain (`pidBankMutable()->pid[i].P`)."
            },
            {
                "name": "I",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets Integral gain (`pidBankMutable()->pid[i].I`)."
            },
            {
                "name": "D",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets Derivative gain (`pidBankMutable()->pid[i].D`)."
            },
            {
                "name": "FF",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets Feed-forward gain (`pidBankMutable()->pid[i].FF`)."
            }
        ],
        "deprecated": null,
        "description": "Sets the standard PID controller gains (P, I, D, FF) for the current PID profile."
    },
    "MSP2_INAV_OPFLOW_CALIBRATION": {
        "hex": "0x2032",
        "id": 8242,
        "mspv": 2,
        "size": 0,
        "struct": null,
        "direction": 0,
        "variable_len": false,
        "payload": [],
        "deprecated": null,
        "description": "Starts the optical flow sensor calibration procedure."
    },
    "MSP2_INAV_FWUPDT_PREPARE": {
        "hex": "0x2033",
        "id": 8243,
        "mspv": 2,
        "size": 4,
        "struct": "I",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "firmwareSize",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Total size of the incoming firmware file in bytes."
            }
        ],
        "deprecated": null,
        "description": "Prepares the flight controller to receive a firmware update via MSP."
    },
    "MSP2_INAV_FWUPDT_STORE": {
        "hex": "0x2034",
        "id": 8244,
        "mspv": 2,
        "size": null,
        "struct": null,
        "direction": 0,
        "variable_len": true,
        "payload": [
            {
                "name": "firmwareChunk",
                "ctype": "uint8_t[]",
                "size": null,
                "units": "",
                "desc": "Chunk of firmware data."
            }
        ],
        "deprecated": null,
        "description": "Stores a chunk of firmware data received via MSP."
    },
    "MSP2_INAV_FWUPDT_EXEC": {
        "hex": "0x2035",
        "id": 8245,
        "mspv": 2,
        "size": 1,
        "struct": "B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "updateType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Type of update (e.g., full flash, specific section - currently ignored/unused)."
            }
        ],
        "deprecated": null,
        "description": "Executes the firmware update process (flashes the stored firmware and reboots)."
    },
    "MSP2_INAV_FWUPDT_ROLLBACK_PREPARE": {
        "hex": "0x2036",
        "id": 8246,
        "mspv": 2,
        "size": 0,
        "struct": null,
        "direction": 0,
        "variable_len": false,
        "payload": [],
        "deprecated": null,
        "description": "Prepares the flight controller to perform a firmware rollback to the previously stored version."
    },
    "MSP2_INAV_FWUPDT_ROLLBACK_EXEC": {
        "hex": "0x2037",
        "id": 8247,
        "mspv": 2,
        "size": 0,
        "struct": null,
        "direction": 0,
        "variable_len": false,
        "payload": [],
        "deprecated": null,
        "description": "Executes the firmware rollback process (flashes the stored backup firmware and reboots)."
    },
    "MSP2_INAV_SAFEHOME": {
        "hex": "0x2038",
        "id": 8248,
        "mspv": 2,
        "size": 10,
        "struct": "2B2i",
        "direction": 2,
        "variable_len": false,
        "payload": [
            {
                "name": "safehomeIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Index requested."
            },
            {
                "name": "enabled",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Boolean: 1 if this safe home is enabled."
            },
            {
                "name": "latitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "",
                "desc": "Latitude (1e7 deg)."
            },
            {
                "name": "longitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "",
                "desc": "Longitude (1e7 deg)."
            }
        ],
        "deprecated": null,
        "description": "Get or Set configuration for a specific Safe Home location."
    },
    "MSP2_INAV_SET_SAFEHOME": {
        "hex": "0x2039",
        "id": 8249,
        "mspv": 2,
        "size": 10,
        "struct": "2B2i",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "safehomeIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Index of the safe home location (0 to `MAX_SAFE_HOMES - 1`)."
            },
            {
                "name": "enabled",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Boolean: 1 to enable this safe home."
            },
            {
                "name": "latitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "",
                "desc": "Latitude (1e7 deg)."
            },
            {
                "name": "longitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "",
                "desc": "Longitude (1e7 deg)."
            }
        ],
        "deprecated": null,
        "description": "Sets the configuration for a specific Safe Home location."
    },
    "MSP2_INAV_MISC2": {
        "hex": "0x203a",
        "id": 8250,
        "mspv": 2,
        "size": 10,
        "struct": "2I2B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "uptimeSeconds",
                "ctype": "uint32_t",
                "size": 4,
                "units": "Seconds",
                "desc": "Time since boot (`micros() / 1000000`)."
            },
            {
                "name": "flightTimeSeconds",
                "ctype": "uint32_t",
                "size": 4,
                "units": "Seconds",
                "desc": "Accumulated flight time (`getFlightTime()`)."
            },
            {
                "name": "throttlePercent",
                "ctype": "uint8_t",
                "size": 1,
                "units": "%",
                "desc": "Current throttle output percentage (`getThrottlePercent(true)`)."
            },
            {
                "name": "autoThrottleFlag",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Boolean",
                "desc": "1 if navigation is controlling throttle, 0 otherwise (`navigationIsControllingThrottle()`)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves miscellaneous runtime information including timers and throttle status."
    },
    "MSP2_INAV_LOGIC_CONDITIONS_SINGLE": {
        "hex": "0x203b",
        "id": 8251,
        "mspv": 2,
        "size": 14,
        "struct": "4BIBIB",
        "direction": 2,
        "variable_len": false,
        "payload": [
            {
                "name": "enabled",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Boolean: 1 if enabled."
            },
            {
                "name": "activatorId",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Activator ID."
            },
            {
                "name": "operation",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum: Logical operation."
            },
            {
                "name": "operandAType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum: Type of operand A."
            },
            {
                "name": "operandAValue",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Value/ID of operand A."
            },
            {
                "name": "operandBType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum: Type of operand B."
            },
            {
                "name": "operandBValue",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Value/ID of operand B."
            },
            {
                "name": "flags",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Bitmask: Condition flags."
            }
        ],
        "deprecated": null,
        "description": "Gets the configuration for a single Logic Condition by its index."
    },
    "MSP2_INAV_ESC_RPM": {
        "hex": "0x2040",
        "id": 8256,
        "mspv": 2,
        "size": 4,
        "struct": "I",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "escRpm",
                "ctype": "uint32_t",
                "size": 4,
                "units": "RPM",
                "desc": "RPM reported by the ESC."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the RPM reported by each ESC via telemetry."
    },
    "MSP2_INAV_ESC_TELEM": {
        "hex": "0x2041",
        "id": 8257,
        "mspv": 2,
        "size": null,
        "struct": null,
        "direction": 1,
        "variable_len": true,
        "payload": [
            {
                "name": "motorCount",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Number of motors reporting telemetry (`getMotorCount()`)."
            },
            {
                "name": "escData",
                "ctype": "escSensorData_t[]",
                "size": null,
                "units": "",
                "desc": "Array of `escSensorData_t` structures containing voltage, current, temp, RPM, errors etc. for each ESC."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the full telemetry data structure reported by each ESC."
    },
    "MSP2_INAV_LED_STRIP_CONFIG_EX": {
        "hex": "0x2048",
        "id": 8264,
        "mspv": 2,
        "size": null,
        "struct": null,
        "direction": 1,
        "variable_len": true,
        "payload": [
            {
                "name": "ledConfig",
                "ctype": "ledConfig_t",
                "size": null,
                "units": "",
                "desc": "Full configuration structure for the LED."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the full configuration for each LED on the strip using the `ledConfig_t` structure. Supersedes `MSP_LED_STRIP_CONFIG`."
    },
    "MSP2_INAV_SET_LED_STRIP_CONFIG_EX": {
        "hex": "0x2049",
        "id": 8265,
        "mspv": 2,
        "size": null,
        "struct": null,
        "direction": 0,
        "variable_len": true,
        "payload": [
            {
                "name": "ledIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Index of the LED to configure (0 to `LED_MAX_STRIP_LENGTH - 1`)."
            },
            {
                "name": "ledConfig",
                "ctype": "ledConfig_t",
                "size": null,
                "units": "",
                "desc": "Full configuration structure for the LED."
            }
        ],
        "deprecated": null,
        "description": "Sets the configuration for a single LED on the strip using the `ledConfig_t` structure. Supersedes `MSP_SET_LED_STRIP_CONFIG`."
    },
    "MSP2_INAV_FW_APPROACH": {
        "hex": "0x204a",
        "id": 8266,
        "mspv": 2,
        "size": 15,
        "struct": "B2IB2hB",
        "direction": 2,
        "variable_len": false,
        "payload": [
            {
                "name": "approachIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Index",
                "desc": "Index requested."
            },
            {
                "name": "approachAlt",
                "ctype": "uint32_t",
                "size": 4,
                "units": "cm",
                "desc": "Altitude for the approach phase."
            },
            {
                "name": "landAlt",
                "ctype": "uint32_t",
                "size": 4,
                "units": "cm",
                "desc": "Altitude for the final landing phase."
            },
            {
                "name": "approachDirection",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Direction of approach (From WP, Specific Heading).",
                "enum": "?_e"
            },
            {
                "name": "landHeading1",
                "ctype": "int16_t",
                "size": 2,
                "units": "degrees",
                "desc": "Primary landing heading (if approachDirection requires it)."
            },
            {
                "name": "landHeading2",
                "ctype": "int16_t",
                "size": 2,
                "units": "degrees",
                "desc": "Secondary landing heading (if approachDirection requires it)."
            },
            {
                "name": "isSeaLevelRef",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Boolean",
                "desc": "1 if altitudes are relative to sea level, 0 if relative to home."
            }
        ],
        "deprecated": null,
        "description": "Get or Set configuration for a specific Fixed Wing Autoland approach."
    },
    "MSP2_INAV_SET_FW_APPROACH": {
        "hex": "0x204b",
        "id": 8267,
        "mspv": 2,
        "size": 15,
        "struct": "B2IB2hB",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "approachIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Index",
                "desc": "Index of the approach setting (0 to `MAX_FW_LAND_APPOACH_SETTINGS - 1`)."
            },
            {
                "name": "approachAlt",
                "ctype": "uint32_t",
                "size": 4,
                "units": "cm",
                "desc": "Sets approach altitude."
            },
            {
                "name": "landAlt",
                "ctype": "uint32_t",
                "size": 4,
                "units": "cm",
                "desc": "Sets landing altitude."
            },
            {
                "name": "approachDirection",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Sets approach direction.",
                "enum": "?_e"
            },
            {
                "name": "landHeading1",
                "ctype": "int16_t",
                "size": 2,
                "units": "degrees",
                "desc": "Sets primary landing heading."
            },
            {
                "name": "landHeading2",
                "ctype": "int16_t",
                "size": 2,
                "units": "degrees",
                "desc": "Sets secondary landing heading."
            },
            {
                "name": "isSeaLevelRef",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Boolean",
                "desc": "Sets altitude reference."
            }
        ],
        "deprecated": null,
        "description": "Sets the configuration for a specific Fixed Wing Autoland approach."
    },
    "MSP2_INAV_GPS_UBLOX_COMMAND": {
        "hex": "0x2050",
        "id": 8272,
        "mspv": 2,
        "size": null,
        "struct": null,
        "direction": 0,
        "variable_len": true,
        "payload": [
            {
                "name": "ubxCommand",
                "ctype": "uint8_t[]",
                "size": null,
                "units": "",
                "desc": "Raw U-Blox UBX protocol command frame (including header, class, ID, length, payload, checksum)."
            }
        ],
        "deprecated": null,
        "description": "Sends a raw command directly to a U-Blox GPS module connected to the FC."
    },
    "MSP2_INAV_RATE_DYNAMICS": {
        "hex": "0x2060",
        "id": 8288,
        "mspv": 2,
        "size": 6,
        "struct": "6B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "sensitivityCenter",
                "ctype": "uint8_t",
                "size": 1,
                "units": "%",
                "desc": "Sensitivity at stick center (`currentControlRateProfile->rateDynamics.sensitivityCenter`)."
            },
            {
                "name": "sensitivityEnd",
                "ctype": "uint8_t",
                "size": 1,
                "units": "%",
                "desc": "Sensitivity at stick ends (`currentControlRateProfile->rateDynamics.sensitivityEnd`)."
            },
            {
                "name": "correctionCenter",
                "ctype": "uint8_t",
                "size": 1,
                "units": "%",
                "desc": "Correction strength at stick center (`currentControlRateProfile->rateDynamics.correctionCenter`)."
            },
            {
                "name": "correctionEnd",
                "ctype": "uint8_t",
                "size": 1,
                "units": "%",
                "desc": "Correction strength at stick ends (`currentControlRateProfile->rateDynamics.correctionEnd`)."
            },
            {
                "name": "weightCenter",
                "ctype": "uint8_t",
                "size": 1,
                "units": "%",
                "desc": "Transition weight at stick center (`currentControlRateProfile->rateDynamics.weightCenter`)."
            },
            {
                "name": "weightEnd",
                "ctype": "uint8_t",
                "size": 1,
                "units": "%",
                "desc": "Transition weight at stick ends (`currentControlRateProfile->rateDynamics.weightEnd`)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves Rate Dynamics configuration parameters for the current control rate profile."
    },
    "MSP2_INAV_SET_RATE_DYNAMICS": {
        "hex": "0x2061",
        "id": 8289,
        "mspv": 2,
        "size": 6,
        "struct": "6B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "sensitivityCenter",
                "ctype": "uint8_t",
                "size": 1,
                "units": "%",
                "desc": "Sets sensitivity at center."
            },
            {
                "name": "sensitivityEnd",
                "ctype": "uint8_t",
                "size": 1,
                "units": "%",
                "desc": "Sets sensitivity at ends."
            },
            {
                "name": "correctionCenter",
                "ctype": "uint8_t",
                "size": 1,
                "units": "%",
                "desc": "Sets correction at center."
            },
            {
                "name": "correctionEnd",
                "ctype": "uint8_t",
                "size": 1,
                "units": "%",
                "desc": "Sets correction at ends."
            },
            {
                "name": "weightCenter",
                "ctype": "uint8_t",
                "size": 1,
                "units": "%",
                "desc": "Sets weight at center."
            },
            {
                "name": "weightEnd",
                "ctype": "uint8_t",
                "size": 1,
                "units": "%",
                "desc": "Sets weight at ends."
            }
        ],
        "deprecated": null,
        "description": "Sets Rate Dynamics configuration parameters for the current control rate profile."
    },
    "MSP2_INAV_EZ_TUNE": {
        "hex": "0x2070",
        "id": 8304,
        "mspv": 2,
        "size": 11,
        "struct": "BH8B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "enabled",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Boolean: 1 if EZ-Tune is enabled (`ezTune()->enabled`)."
            },
            {
                "name": "filterHz",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Filter frequency used during tuning (`ezTune()->filterHz`)."
            },
            {
                "name": "axisRatio",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Roll vs Pitch axis tuning ratio (`ezTune()->axisRatio`)."
            },
            {
                "name": "response",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Desired response characteristic (`ezTune()->response`)."
            },
            {
                "name": "damping",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Desired damping characteristic (`ezTune()->damping`)."
            },
            {
                "name": "stability",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Stability preference (`ezTune()->stability`)."
            },
            {
                "name": "aggressiveness",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Aggressiveness preference (`ezTune()->aggressiveness`)."
            },
            {
                "name": "rate",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Resulting rate setting (`ezTune()->rate`)."
            },
            {
                "name": "expo",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Resulting expo setting (`ezTune()->expo`)."
            },
            {
                "name": "snappiness",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Snappiness preference (`ezTune()->snappiness`)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the current EZ-Tune parameters."
    },
    "MSP2_INAV_EZ_TUNE_SET": {
        "hex": "0x2071",
        "id": 8305,
        "mspv": 2,
        "size": 11,
        "struct": "BH8B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "enabled",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets enabled state."
            },
            {
                "name": "filterHz",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Sets filter frequency."
            },
            {
                "name": "axisRatio",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets axis ratio."
            },
            {
                "name": "response",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets response characteristic."
            },
            {
                "name": "damping",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets damping characteristic."
            },
            {
                "name": "stability",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets stability preference."
            },
            {
                "name": "aggressiveness",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets aggressiveness preference."
            },
            {
                "name": "rate",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets rate setting."
            },
            {
                "name": "expo",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Sets expo setting."
            },
            {
                "name": "snappiness",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "(Optional) Sets snappiness preference."
            }
        ],
        "deprecated": null,
        "description": "Sets the EZ-Tune parameters and triggers an update."
    },
    "MSP2_INAV_SELECT_MIXER_PROFILE": {
        "hex": "0x2080",
        "id": 8320,
        "mspv": 2,
        "size": 1,
        "struct": "B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "mixerProfileIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Index of the mixer profile to activate (0-based)."
            }
        ],
        "deprecated": null,
        "description": "Selects the active mixer profile and saves configuration."
    },
    "MSP2_ADSB_VEHICLE_LIST": {
        "hex": "0x2090",
        "id": 8336,
        "mspv": 2,
        "size": null,
        "struct": null,
        "direction": 1,
        "variable_len": true,
        "payload": [
            {
                "name": "maxVehicles",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Maximum number of vehicles tracked (`MAX_ADSB_VEHICLES`). 0 if `USE_ADSB` disabled."
            },
            {
                "name": "callsignLength",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Maximum length of callsign string (`ADSB_CALL_SIGN_MAX_LENGTH`). 0 if `USE_ADSB` disabled."
            },
            {
                "name": "totalVehicleMsgs",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Total vehicle messages received (`getAdsbStatus()->vehiclesMessagesTotal`). 0 if `USE_ADSB` disabled."
            },
            {
                "name": "totalHeartbeatMsgs",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Total heartbeat messages received (`getAdsbStatus()->heartbeatMessagesTotal`). 0 if `USE_ADSB` disabled."
            },
            {
                "name": "callsign",
                "ctype": "char[ADSB_CALL_SIGN_MAX_LENGTH]",
                "size": null,
                "units": "",
                "desc": "Vehicle callsign (padded with nulls)."
            },
            {
                "name": "icao",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "ICAO 24-bit address."
            },
            {
                "name": "latitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "",
                "desc": "Latitude (1e7 deg)."
            },
            {
                "name": "longitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "",
                "desc": "Longitude (1e7 deg)."
            },
            {
                "name": "altitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "",
                "desc": "Altitude (cm)."
            },
            {
                "name": "heading",
                "ctype": "int16_t",
                "size": 2,
                "units": "",
                "desc": "Heading (degrees)."
            },
            {
                "name": "tslc",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Time Since Last Communication (seconds)."
            },
            {
                "name": "emitterType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum: Type of ADSB emitter."
            },
            {
                "name": "ttl",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Time-to-live counter for this entry."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the list of currently tracked ADSB (Automatic Dependent Surveillance–Broadcast) vehicles."
    },
    "MSP2_INAV_CUSTOM_OSD_ELEMENTS": {
        "hex": "0x2100",
        "id": 8448,
        "mspv": 2,
        "size": 3,
        "struct": "3B",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "maxElements",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Maximum number of custom elements (`MAX_CUSTOM_ELEMENTS`)."
            },
            {
                "name": "maxTextLength",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Maximum length of the text part (`OSD_CUSTOM_ELEMENT_TEXT_SIZE - 1`)."
            },
            {
                "name": "maxParts",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Maximum number of parts per element (`CUSTOM_ELEMENTS_PARTS`)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves counts related to custom OSD elements defined by the programming framework."
    },
    "MSP2_INAV_CUSTOM_OSD_ELEMENT": {
        "hex": "0x2101",
        "id": 8449,
        "mspv": 2,
        "size": null,
        "struct": null,
        "direction": 2,
        "variable_len": true,
        "payload": [
            {
                "name": "partType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`customElementType_e`): Type of this part (Text, Variable, Symbol).",
                "enum": "customElementType_e"
            },
            {
                "name": "partValue",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Value/ID associated with this part (GVAR index, Symbol ID, etc.)."
            },
            {
                "name": "**Visibility Data:**",
                "ctype": "",
                "size": null,
                "units": "",
                "desc": ""
            },
            {
                "name": "visibilityType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`logicOperandType_e`): Type of visibility condition source.",
                "enum": "logicOperandType_e"
            },
            {
                "name": "visibilityValue",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Value/ID of the visibility condition source (e.g., Logic Condition ID)."
            },
            {
                "name": "**Text Data:**",
                "ctype": "",
                "size": null,
                "units": "",
                "desc": ""
            },
            {
                "name": "elementText",
                "ctype": "char[OSD_CUSTOM_ELEMENT_TEXT_SIZE - 1]",
                "size": null,
                "units": "",
                "desc": "Static text part of the element (null padding likely)."
            }
        ],
        "deprecated": null,
        "description": "Gets the configuration of a single custom OSD element defined by the programming framework."
    },
    "MSP2_INAV_SET_CUSTOM_OSD_ELEMENTS": {
        "hex": "0x2102",
        "id": 8450,
        "mspv": 2,
        "size": null,
        "struct": null,
        "direction": 0,
        "variable_len": true,
        "payload": [
            {
                "name": "elementIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Index of the custom element (0 to `MAX_CUSTOM_ELEMENTS - 1`)."
            },
            {
                "name": "partType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`customElementType_e`): Type of this part.",
                "enum": "customElementType_e"
            },
            {
                "name": "partValue",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Value/ID associated with this part."
            },
            {
                "name": "**Visibility Data:**",
                "ctype": "",
                "size": null,
                "units": "",
                "desc": ""
            },
            {
                "name": "visibilityType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`logicOperandType_e`): Type of visibility condition source.",
                "enum": "logicOperandType_e"
            },
            {
                "name": "visibilityValue",
                "ctype": "uint16_t",
                "size": 2,
                "units": "",
                "desc": "Value/ID of the visibility condition source."
            },
            {
                "name": "**Text Data:**",
                "ctype": "",
                "size": null,
                "units": "",
                "desc": ""
            },
            {
                "name": "elementText",
                "ctype": "char[OSD_CUSTOM_ELEMENT_TEXT_SIZE - 1]",
                "size": null,
                "units": "",
                "desc": "Static text part of the element."
            }
        ],
        "deprecated": null,
        "description": "Sets the configuration of a single custom OSD element defined by the programming framework."
    },
    "MSP2_INAV_SERVO_CONFIG": {
        "hex": "0x2200",
        "id": 8704,
        "mspv": 2,
        "size": 7,
        "struct": "3HB",
        "direction": 1,
        "variable_len": false,
        "payload": [
            {
                "name": "min",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Minimum servo endpoint (`servoParams(i)->min`)."
            },
            {
                "name": "max",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Maximum servo endpoint (`servoParams(i)->max`)."
            },
            {
                "name": "middle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Middle/Neutral servo position (`servoParams(i)->middle`)."
            },
            {
                "name": "rate",
                "ctype": "uint8_t",
                "size": 1,
                "units": "% (-100 to 100)",
                "desc": "Servo rate/scaling (`servoParams(i)->rate`)."
            }
        ],
        "deprecated": null,
        "description": "Retrieves the configuration parameters for all supported servos (min, max, middle, rate). Supersedes `MSP_SERVO_CONFIGURATIONS`."
    },
    "MSP2_INAV_SET_SERVO_CONFIG": {
        "hex": "0x2201",
        "id": 8705,
        "mspv": 2,
        "size": 8,
        "struct": "B3HB",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "servoIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Index",
                "desc": "Index of the servo to configure (0 to `MAX_SUPPORTED_SERVOS - 1`)."
            },
            {
                "name": "min",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Sets minimum servo endpoint."
            },
            {
                "name": "max",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Sets maximum servo endpoint."
            },
            {
                "name": "middle",
                "ctype": "uint16_t",
                "size": 2,
                "units": "PWM",
                "desc": "Sets middle/neutral servo position."
            },
            {
                "name": "rate",
                "ctype": "uint8_t",
                "size": 1,
                "units": "%",
                "desc": "Sets servo rate/scaling."
            }
        ],
        "deprecated": null,
        "description": "Sets the configuration parameters for a single servo. Supersedes `MSP_SET_SERVO_CONFIGURATION`."
    },
    "MSP2_INAV_GEOZONE": {
        "hex": "0x2210",
        "id": 8720,
        "mspv": 2,
        "size": 14,
        "struct": "3B2I3B",
        "direction": 2,
        "variable_len": false,
        "payload": [
            {
                "name": "geozoneIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Index requested."
            },
            {
                "name": "type",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`GEOZONE_TYPE_*`): Zone type (Inclusion/Exclusion).",
                "enum": "GEOZONE_TYPE_*"
            },
            {
                "name": "shape",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`GEOZONE_SHAPE_*`): Zone shape (Polygon/Circular).",
                "enum": "GEOZONE_SHAPE_*"
            },
            {
                "name": "minAltitude",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Minimum allowed altitude within the zone (cm)."
            },
            {
                "name": "maxAltitude",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Maximum allowed altitude within the zone (cm)."
            },
            {
                "name": "isSeaLevelRef",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Boolean: 1 if altitudes are relative to sea level, 0 if relative to home."
            },
            {
                "name": "fenceAction",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`GEOZONE_ACTION_*`): Action to take upon boundary violation.",
                "enum": "GEOZONE_ACTION_*"
            },
            {
                "name": "vertexCount",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Number of vertices defined for this zone."
            }
        ],
        "deprecated": null,
        "description": "Get configuration for a specific Geozone."
    },
    "MSP2_INAV_SET_GEOZONE": {
        "hex": "0x2211",
        "id": 8721,
        "mspv": 2,
        "size": 14,
        "struct": "3B2I3B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "geozoneIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Index of the geozone (0 to `MAX_GEOZONES_IN_CONFIG - 1`)."
            },
            {
                "name": "type",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`GEOZONE_TYPE_*`): Zone type.",
                "enum": "GEOZONE_TYPE_*"
            },
            {
                "name": "shape",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`GEOZONE_SHAPE_*`): Zone shape.",
                "enum": "GEOZONE_SHAPE_*"
            },
            {
                "name": "minAltitude",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Minimum allowed altitude (cm)."
            },
            {
                "name": "maxAltitude",
                "ctype": "uint32_t",
                "size": 4,
                "units": "",
                "desc": "Maximum allowed altitude (cm)."
            },
            {
                "name": "isSeaLevelRef",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Boolean: Altitude reference."
            },
            {
                "name": "fenceAction",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Enum (`GEOZONE_ACTION_*`): Fence action.",
                "enum": "GEOZONE_ACTION_*"
            },
            {
                "name": "vertexCount",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Number of vertices to be defined (used for validation later)."
            }
        ],
        "deprecated": null,
        "description": "Sets the main configuration for a specific Geozone (type, shape, altitude, action). **This command resets (clears) all vertices associated with the zone.**"
    },
    "MSP2_INAV_GEOZONE_VERTEX": {
        "hex": "0x2212",
        "id": 8722,
        "mspv": 2,
        "size": 10,
        "struct": "2B2i",
        "direction": 2,
        "variable_len": false,
        "payload": [
            {
                "name": "geozoneIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Index",
                "desc": "Geozone index requested."
            },
            {
                "name": "vertexId",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Index",
                "desc": "Vertex index requested."
            },
            {
                "name": "latitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "deg * 1e7",
                "desc": "Vertex latitude."
            },
            {
                "name": "longitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "deg * 1e7",
                "desc": "Vertex longitude."
            }
        ],
        "deprecated": null,
        "description": "Get a specific vertex (or center+radius for circular zones) of a Geozone."
    },
    "MSP2_INAV_SET_GEOZONE_VERTEX": {
        "hex": "0x2213",
        "id": 8723,
        "mspv": 2,
        "size": 10,
        "struct": "2B2i",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "geozoneIndex",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Index",
                "desc": "Geozone index."
            },
            {
                "name": "vertexId",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Index",
                "desc": "Vertex index (0-based)."
            },
            {
                "name": "latitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "deg * 1e7",
                "desc": "Vertex latitude."
            },
            {
                "name": "longitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "deg * 1e7",
                "desc": "Vertex longitude."
            }
        ],
        "deprecated": null,
        "description": "Sets a specific vertex (or center+radius for circular zones) for a Geozone."
    },
    "MSP2_BETAFLIGHT_BIND": {
        "hex": "0x3000",
        "id": 12288,
        "mspv": 2,
        "size": 0,
        "struct": null,
        "direction": 0,
        "variable_len": false,
        "payload": [],
        "deprecated": null,
        "description": "Initiates the receiver binding procedure for supported serial protocols (CRSF, SRXL2)."
    },
    "MSP2_SENSOR_RANGEFINDER": {
        "hex": "0x1f01",
        "id": 7937,
        "mspv": 2,
        "size": 5,
        "struct": "Bi",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "quality",
                "ctype": "uint8_t",
                "size": 1,
                "units": "0-255",
                "desc": "Quality of the measurement."
            },
            {
                "name": "distanceMm",
                "ctype": "int32_t",
                "size": 4,
                "units": "mm",
                "desc": "Measured distance. Negative value indicates out of range."
            }
        ],
        "deprecated": null,
        "description": "Provides rangefinder data (distance, quality) from an external MSP-based sensor."
    },
    "MSP2_SENSOR_OPTIC_FLOW": {
        "hex": "0x1f02",
        "id": 7938,
        "mspv": 2,
        "size": 9,
        "struct": "B2i",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "quality",
                "ctype": "uint8_t",
                "size": 1,
                "units": "",
                "desc": "Quality of the measurement (0-255)."
            },
            {
                "name": "motionX",
                "ctype": "int32_t",
                "size": 4,
                "units": "",
                "desc": "Raw integrated flow value X."
            },
            {
                "name": "motionY",
                "ctype": "int32_t",
                "size": 4,
                "units": "",
                "desc": "Raw integrated flow value Y."
            }
        ],
        "deprecated": null,
        "description": "Provides optical flow data (motion, quality) from an external MSP-based sensor."
    },
    "MSP2_SENSOR_GPS": {
        "hex": "0x1f03",
        "id": 7939,
        "mspv": 2,
        "size": 52,
        "struct": "BHI2B4H6i3H5B",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "instance",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Sensor instance number (for multi-GPS)."
            },
            {
                "name": "gpsWeek",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "GPS week number (0xFFFF if unavailable)."
            },
            {
                "name": "msTOW",
                "ctype": "uint32_t",
                "size": 4,
                "units": "ms",
                "desc": "Milliseconds Time of Week."
            },
            {
                "name": "fixType",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Enum",
                "desc": "Type of GPS fix.",
                "enum": "?_e"
            },
            {
                "name": "satellitesInView",
                "ctype": "uint8_t",
                "size": 1,
                "units": "Count",
                "desc": "Number of satellites used in solution."
            },
            {
                "name": "hPosAccuracy",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm",
                "desc": "Horizontal position accuracy estimate."
            },
            {
                "name": "vPosAccuracy",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm",
                "desc": "Vertical position accuracy estimate."
            },
            {
                "name": "hVelAccuracy",
                "ctype": "uint16_t",
                "size": 2,
                "units": "cm/s",
                "desc": "Horizontal velocity accuracy estimate."
            },
            {
                "name": "hdop",
                "ctype": "uint16_t",
                "size": 2,
                "units": "HDOP * 100",
                "desc": "Horizontal Dilution of Precision."
            },
            {
                "name": "longitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "deg * 1e7",
                "desc": "Longitude."
            },
            {
                "name": "latitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "deg * 1e7",
                "desc": "Latitude."
            },
            {
                "name": "mslAltitude",
                "ctype": "int32_t",
                "size": 4,
                "units": "cm",
                "desc": "Altitude above Mean Sea Level."
            },
            {
                "name": "nedVelNorth",
                "ctype": "int32_t",
                "size": 4,
                "units": "cm/s",
                "desc": "North velocity (NED frame)."
            },
            {
                "name": "nedVelEast",
                "ctype": "int32_t",
                "size": 4,
                "units": "cm/s",
                "desc": "East velocity (NED frame)."
            },
            {
                "name": "nedVelDown",
                "ctype": "int32_t",
                "size": 4,
                "units": "cm/s",
                "desc": "Down velocity (NED frame)."
            },
            {
                "name": "groundCourse",
                "ctype": "uint16_t",
                "size": 2,
                "units": "deg * 100",
                "desc": "Ground course (0-36000)."
            },
            {
                "name": "trueYaw",
                "ctype": "uint16_t",
                "size": 2,
                "units": "deg * 100",
                "desc": "True heading/yaw (0-36000, 65535 if unavailable)."
            },
            {
                "name": "year",
                "ctype": "uint16_t",
                "size": 2,
                "units": "-",
                "desc": "Year (e.g., 2023)."
            },
            {
                "name": "month",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Month (1-12)."
            },
            {
                "name": "day",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Day of month (1-31)."
            },
            {
                "name": "hour",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Hour (0-23)."
            },
            {
                "name": "min",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Minute (0-59)."
            },
            {
                "name": "sec",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Second (0-59)."
            }
        ],
        "deprecated": null,
        "description": "Provides detailed GPS data from an external MSP-based GPS module."
    },
    "MSP2_SENSOR_COMPASS": {
        "hex": "0x1f04",
        "id": 7940,
        "mspv": 2,
        "size": 11,
        "struct": "BI3h",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "instance",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Sensor instance number."
            },
            {
                "name": "timeMs",
                "ctype": "uint32_t",
                "size": 4,
                "units": "ms",
                "desc": "Timestamp from the sensor."
            },
            {
                "name": "magX",
                "ctype": "int16_t",
                "size": 2,
                "units": "mGauss",
                "desc": "Front component reading."
            },
            {
                "name": "magY",
                "ctype": "int16_t",
                "size": 2,
                "units": "mGauss",
                "desc": "Right component reading."
            },
            {
                "name": "magZ",
                "ctype": "int16_t",
                "size": 2,
                "units": "mGauss",
                "desc": "Down component reading."
            }
        ],
        "deprecated": null,
        "description": "Provides magnetometer data from an external MSP-based compass module."
    },
    "MSP2_SENSOR_BAROMETER": {
        "hex": "0x1f05",
        "id": 7941,
        "mspv": 2,
        "size": 11,
        "struct": "BIfh",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "instance",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Sensor instance number."
            },
            {
                "name": "timeMs",
                "ctype": "uint32_t",
                "size": 4,
                "units": "ms",
                "desc": "Timestamp from the sensor."
            },
            {
                "name": "pressurePa",
                "ctype": "float",
                "size": 4,
                "units": "Pa",
                "desc": "Absolute pressure."
            },
            {
                "name": "temp",
                "ctype": "int16_t",
                "size": 2,
                "units": "0.01 deg C",
                "desc": "Temperature."
            }
        ],
        "deprecated": null,
        "description": "Provides barometer data from an external MSP-based barometer module."
    },
    "MSP2_SENSOR_AIRSPEED": {
        "hex": "0x1f06",
        "id": 7942,
        "mspv": 2,
        "size": 11,
        "struct": "BIfh",
        "direction": 0,
        "variable_len": false,
        "payload": [
            {
                "name": "instance",
                "ctype": "uint8_t",
                "size": 1,
                "units": "-",
                "desc": "Sensor instance number."
            },
            {
                "name": "timeMs",
                "ctype": "uint32_t",
                "size": 4,
                "units": "ms",
                "desc": "Timestamp from the sensor."
            },
            {
                "name": "diffPressurePa",
                "ctype": "float",
                "size": 4,
                "units": "Pa",
                "desc": "Differential pressure."
            },
            {
                "name": "temp",
                "ctype": "int16_t",
                "size": 2,
                "units": "0.01 deg C",
                "desc": "Temperature."
            }
        ],
        "deprecated": null,
        "description": "Provides airspeed data from an external MSP-based pitot sensor module."
    },
    "MSP2_SENSOR_HEADTRACKER": {
        "hex": "0x1f07",
        "id": 7943,
        "mspv": 2,
        "size": null,
        "struct": null,
        "direction": 0,
        "variable_len": true,
        "payload": [
            {
                "name": "...",
                "ctype": "Varies",
                "size": null,
                "units": "Head tracker angles (e.g., int16 Roll, Pitch, Yaw in deci-degrees).",
                "desc": ""
            }
        ],
        "deprecated": null,
        "description": "Provides head tracker orientation data."
    }
}